using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—Ç–∏
public class Card : MonoBehaviour, IPointerClickHandler
{
    [Header("–ö–∞—Ä—Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
    public GameObject heroPrefab; // –ü—Ä–µ—Ñ–∞–± –≥–µ—Ä–æ—è —è–∫–∏–π –±—É–¥–µ —Å–ø–∞–≤–Ω–∏—Ç–∏—Å—å
    public bool isSelected = false;
    public bool isInSlot = false; // –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–∞—Ä—Ç–∞ –≤ —Å–ª–æ—Ç—ñ
    
    // –ó–∞–±–æ—Ä–æ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è, –¥–æ–∫–∏ –≥–µ—Ä–æ–π –∂–∏–≤–∏–π
    [Header("–°—Ç–∞–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")]
    [SerializeField] private bool isLockedInUse = false;
    [SerializeField] private GameObject linkedHeroInstance = null;
    
    [Header("–¢–∞–π–º–µ—Ä –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏")]
    [SerializeField] private float cooldownAfterSpawn = 5f; // –ß–∞—Å –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≥–µ—Ä–æ–π –ø—ñ—à–æ–≤ –Ω–∞ —Å–ø–∞–≤–Ω
    [SerializeField] private bool isOnCooldown = false;
    [SerializeField] private float cooldownEndTime = 0f;
    
    // –ù–û–í–ï: –°—Ç–∞–Ω –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≥–µ—Ä–æ—è
    [Header("–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≥–µ—Ä–æ—è")]
    [SerializeField] private bool isSelectedForMovement = false;
    
    private Image cardImage;
    private Button cardButton;
    private Vector3 originalPosition; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é
    private Transform originalParent; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞—Ç—å–∫–∞
    
    void Start()
    {
        cardImage = GetComponent<Image>();
        cardButton = GetComponent<Button>();
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é —Ç–∞ –±–∞—Ç—å–∫–∞
        originalPosition = transform.position;
        originalParent = transform.parent;
        
        // –Ø–∫—â–æ —î –∫–Ω–æ–ø–∫–∞, –¥–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫
        if (cardButton != null)
        {
            cardButton.onClick.AddListener(OnCardClick);
        }
    }
    
    void Update()
    {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏
        CheckCooldown();
    }
    
    private void CheckCooldown()
    {
        if (isOnCooldown && Time.time >= cooldownEndTime)
        {
            // –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            isOnCooldown = false;
            Debug.Log($"‚úÖ –ö–∞—Ä—Ç–∞ {gameObject.name} –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∂–µ–Ω–∞ —ñ –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è");
        }
    }
    
    // –î–ª—è 3D –æ–±'—î–∫—Ç—ñ–≤
    void OnMouseDown()
    {
        HandleCardClick();
    }
    
    // –î–ª—è UI –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (IPointerClickHandler)
    public void OnPointerClick(PointerEventData eventData)
    {
        HandleCardClick();
    }
    
    // –î–ª—è UI –∫–Ω–æ–ø–æ–∫
    public void OnCardClick()
    {
        HandleCardClick();
    }
    
    private void HandleCardClick()
    {
        // –í —ñ–≥—Ä–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ ‚Äî —è–∫—â–æ –∫–∞—Ä—Ç–∞ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ —ñ –≥–µ—Ä–æ–π –∂–∏–≤–∏–π,
        // –º–∏ –æ–±–∏—Ä–∞—î–º–æ –ø–æ–≤'—è–∑–∞–Ω–æ–≥–æ –≥–µ—Ä–æ—è, –∞ —Å–∞–º–∞ –∫–∞—Ä—Ç–∞ —Å—Ç–∞–Ω–µ "–∫–æ–º–∞–Ω–¥–æ—é –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è" –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ –∑–æ–Ω—ñ
        if (GameManager.Instance != null && GameManager.Instance.IsGameMode())
        {
            if (isLockedInUse && LinkedHeroAlive())
            {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥—Ü—ñ
                if (isOnCooldown)
                {
                    float remainingTime = cooldownEndTime - Time.time;
                    Debug.Log($"‚è≥ –ö–∞—Ä—Ç—É {gameObject.name} —â–µ –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥—Ü—ñ. –ó–∞–ª–∏—à–∏–ª–æ—Å—è: {remainingTime:F1} —Å–µ–∫");
                    return;
                }
                
                GameManager.SelectHero(linkedHeroInstance);
                Debug.Log($"‚ÑπÔ∏è –ö–∞—Ä—Ç—É {gameObject.name} –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ ‚Äî –≤–∏–±—Ä–∞–Ω–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –≥–µ—Ä–æ—è. –ö–ª—ñ–∫ –ø–æ –∑–æ–Ω—ñ –ø–æ–≤–µ—Ä–Ω–µ –π–æ–≥–æ –≤ –∑–æ–Ω—É (–±–µ–∑ —Å–ø–∞–≤–Ω—É –Ω–æ–≤–æ–≥–æ)");
            }
        }
        
        // –î–∞–ª—ñ ‚Äî –ø–æ—Ç–æ—á–Ω–∞ –ª–æ–≥—ñ–∫–∞
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∂–∏–º –≥—Ä–∏
        if (GameManager.Instance != null)
        {
            if (GameManager.Instance.IsPrepareMode())
            {
                if (isInSlot)
                {
                    // –†–µ–∂–∏–º –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ - –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–∞—Ä—Ç—É –∑—ñ —Å–ª–æ—Ç–∞ –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –º—ñ—Å—Ü–µ
                    ReturnToOriginalPosition();
                }
                else
                {
                    // –†–µ–∂–∏–º –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–∞–≤–∏–º–æ –∫–∞—Ä—Ç—É –≤ —Å–ª–æ—Ç
                    TryPlaceInSlot();
                }
            }
            else if (GameManager.Instance.IsGameMode() && isInSlot)
            {
                // –Ü–≥—Ä–æ–≤–∏–π —Ä–µ–∂–∏–º - –≤–∏–±–∏—Ä–∞—î–º–æ –∫–∞—Ä—Ç—É –¥–ª—è –¥—ñ—ó
                // –Ø–∫—â–æ –≥–µ—Ä–æ–π —â–µ –∂–∏–≤–∏–π —ñ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π ‚Äî —Ü—è –∫–∞—Ä—Ç–∞ —ñ–Ω—ñ—Ü—ñ—é–≤–∞—Ç–∏–º–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≥–µ—Ä–æ—è –¥–æ –∑–æ–Ω–∏ –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ –∑–æ–Ω—ñ
                SelectCard();
            }
        }
        else
        {
            // –Ø–∫—â–æ –Ω–µ–º–∞—î GameManager, –ø–æ–≤–æ–¥–∏–º–æ—Å—è —è–∫ —Ä–∞–Ω—ñ—à–µ
            if (isInSlot)
            {
                ReturnToOriginalPosition();
            }
            else
            {
                TryPlaceInSlot();
            }
        }
    }
    
    private void ReturnToOriginalPosition()
    {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–ª–æ—Ç –¥–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∫–∞—Ä—Ç–∞ —ñ –≤–∏–¥–∞–ª—è—î–º–æ –∑ –Ω—å–æ–≥–æ
        Slot[] allSlots = FindObjectsByType<Slot>(FindObjectsSortMode.None);
        foreach (Slot slot in allSlots)
        {
            if (slot.GetCurrentCard() == gameObject)
            {
                slot.RemoveCard();
                break;
            }
        }
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–∞—Ä—Ç—É –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –º—ñ—Å—Ü–µ
        transform.SetParent(originalParent);
        transform.position = originalPosition;
        SetInSlot(false);
        
        Debug.Log($"–ö–∞—Ä—Ç—É {gameObject.name} –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –º—ñ—Å—Ü–µ");
    }
    
    private void TryPlaceInSlot()
    {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–ª—å–Ω–∏–π —Å–ª–æ—Ç –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º
        Slot freeSlot = FindFreeSlotByPriority();
        if (freeSlot != null)
        {
            // –†–æ–∑–º—ñ—â—É—î–º–æ –∫–∞—Ä—Ç—É –≤ —Å–ª–æ—Ç—ñ
            freeSlot.PlaceCardDirectly(this);
            Debug.Log($"–ö–∞—Ä—Ç—É {gameObject.name} –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–º—ñ—â–µ–Ω–æ –≤ —Å–ª–æ—Ç—ñ {freeSlot.gameObject.name}");
        }
        else
        {
            Debug.Log("–ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –¥–ª—è –∫–∞—Ä—Ç–∏!");
        }
    }
    
    // –ú–ï–¢–û–î 1: –ü–æ—à—É–∫ –ø–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É —Å–ª–æ—Ç–∞
    private Slot FindFreeSlotByPriority()
    {
        Slot[] allSlots = FindObjectsByType<Slot>(FindObjectsSortMode.None);
        
        // –°–æ—Ä—Ç—É—î–º–æ —Å–ª–æ—Ç–∏ –ø–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É (–º–µ–Ω—à–µ —á–∏—Å–ª–æ = –≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
        System.Array.Sort(allSlots, (slot1, slot2) => 
            slot1.GetSlotPriority().CompareTo(slot2.GetSlotPriority()));
        
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–∏–π –≤—ñ–ª—å–Ω–∏–π —Å–ª–æ—Ç –≤ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ–º—É —Å–ø–∏—Å–∫—É
        foreach (Slot slot in allSlots)
        {
            if (slot.IsEmpty())
            {
                return slot;
            }
        }
        return null;
    }

    private void SelectCard()
    {
        // –°–∫–∏–¥–∞—î–º–æ –≤–∏–±—ñ—Ä –∑ —ñ–Ω—à–∏—Ö –∫–∞—Ä—Ç
        Card[] allCards = FindObjectsByType<Card>(FindObjectsSortMode.None);
        foreach (Card card in allCards)
        {
            card.DeselectCard();
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥—Ü—ñ
        if (isOnCooldown)
        {
            float remainingTime = cooldownEndTime - Time.time;
            Debug.Log($"‚è≥ –ö–∞—Ä—Ç—É {gameObject.name} –Ω–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–±—Ä–∞—Ç–∏ ‚Äî —â–µ –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥—Ü—ñ. –ó–∞–ª–∏—à–∏–ª–æ—Å—è: {remainingTime:F1} —Å–µ–∫");
            return;
        }
        
        // –ó–∞–≤–∂–¥–∏ –¥–æ–∑–≤–æ–ª—è—î–º–æ –≤–∏–±—ñ—Ä –∫–∞—Ä—Ç–∏
        isSelected = true;
        
        // –ù–û–í–ï: –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —è–∫—â–æ –≥–µ—Ä–æ–π –≤–∂–µ —ñ—Å–Ω—É—î
        if (isLockedInUse && LinkedHeroAlive())
        {
            isSelectedForMovement = true;
            Debug.Log($"üéØ –ö–∞—Ä—Ç—É –≤–∏–±—Ä–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è: {gameObject.name} (–≥–µ—Ä–æ–π {linkedHeroInstance.name} –≥–æ—Ç–æ–≤–∏–π –¥–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è)");
        }
        else
        {
            isSelectedForMovement = false;
            Debug.Log("–ö–∞—Ä—Ç—É –≤–∏–±—Ä–∞–Ω–æ: " + gameObject.name);
        }
    }
    
    public void DeselectCard()
    {
        isSelected = false;
        isSelectedForMovement = false; // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
    }
    
    public GameObject GetHeroPrefab()
    {
        return heroPrefab;
    }
    
    // === –ù–û–í–ê –õ–û–ì–Ü–ö–ê –ë–õ–û–ö–£–í–ê–ù–ù–Ø ===
    public bool IsInUse()
    {
        // –ö–∞—Ä—Ç–∞ –≤–≤–∞–∂–∞—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ—é, —è–∫—â–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞ –≥–µ—Ä–æ—î–º —ñ –ù–ï –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥—Ü—ñ
        return isLockedInUse && LinkedHeroAlive() && !isOnCooldown;
    }

    public void LockForHero(GameObject heroInstance)
    {
        linkedHeroInstance = heroInstance;
        isLockedInUse = heroInstance != null;
    }

    public void Unlock()
    {
        isLockedInUse = false;
        linkedHeroInstance = null;
    }

    public void StartCooldown()
    {
        isOnCooldown = true;
        cooldownEndTime = Time.time + cooldownAfterSpawn;
        Debug.Log($"‚è≥ –ö–∞—Ä—Ç–∞ {gameObject.name} –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥—Ü—ñ {cooldownAfterSpawn} —Å–µ–∫");
    }

    public bool IsOnCooldown()
    {
        return isOnCooldown;
    }

    public float GetCooldownRemaining()
    {
        if (!isOnCooldown) return 0f;
        return Mathf.Max(0f, cooldownEndTime - Time.time);
    }

    public GameObject GetLinkedHero()
    {
        return linkedHeroInstance;
    }

    public bool LinkedHeroAlive()
    {
        if (linkedHeroInstance == null) return false;
        var unit = linkedHeroInstance.GetComponent<Unit>();
        return linkedHeroInstance != null && unit != null && !unit.isDead;
    }
    // === –ö–Ü–ù–ï–¶–¨ –ù–û–í–û–á –õ–û–ì–Ü–ö–ò ===
    
    public void SetInSlot(bool inSlot)
    {
        isInSlot = inSlot;
        if (isInSlot)
        {
            isSelected = false; // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∫–∏–¥–∞—î–º–æ –≤–∏–±—ñ—Ä –∫–æ–ª–∏ –∫–∞—Ä—Ç–∞ –≤ —Å–ª–æ—Ç—ñ
            isSelectedForMovement = false; // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
        }
    }
    
    /// <summary>
    /// –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–∞—Ä—Ç–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Å–ª–æ—Ç—ñ
    /// </summary>
    public bool IsInSlot()
    {
        return isInSlot;
    }
    
    // –ù–û–í–Ü –ú–ï–¢–û–î–ò –î–õ–Ø –ü–ï–†–ï–ú–Ü–©–ï–ù–ù–Ø –ì–ï–†–û–Ø
    
    /// <summary>
    /// –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–∞—Ä—Ç–∞ –≤–∏–±—Ä–∞–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≥–µ—Ä–æ—è
    /// </summary>
    public bool IsSelectedForMovement()
    {
        return isSelectedForMovement && isLockedInUse && LinkedHeroAlive();
    }
    
    /// <summary>
    /// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
    /// </summary>
    public void SetMovementState(bool forMovement)
    {
        isSelectedForMovement = forMovement;
    }
    
    /// <summary>
    /// –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
    /// </summary>
    public string GetMovementInfo()
    {
        if (!isSelectedForMovement) return "–ù–µ –≤–∏–±—Ä–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è";
        
        if (linkedHeroInstance != null)
        {
            Zone currentZone = GetHeroCurrentZone();
            if (currentZone != null)
            {
                return $"–ì–µ—Ä–æ–π {linkedHeroInstance.name} –≤ –∑–æ–Ω—ñ {currentZone.name} - –≥–æ—Ç–æ–≤–∏–π –¥–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è";
            }
            else
            {
                return $"–ì–µ—Ä–æ–π {linkedHeroInstance.name} –Ω–µ –≤ –∑–æ–Ω—ñ - –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è";
            }
        }
        
        return "–ù–µ–≤—ñ–¥–æ–º–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è";
    }
    
    /// <summary>
    /// –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ—Ç–æ—á–Ω—É –∑–æ–Ω—É –≥–µ—Ä–æ—è
    /// </summary>
    private Zone GetHeroCurrentZone()
    {
        if (linkedHeroInstance == null) return null;
        
        Zone[] allZones = FindObjectsByType<Zone>(FindObjectsSortMode.None);
        foreach (Zone zone in allZones)
        {
            if (zone.HasHero() && zone.GetCurrentHero() == linkedHeroInstance)
            {
                return zone;
            }
        }
        return null;
    }
}