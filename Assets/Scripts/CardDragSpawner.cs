using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;
using System.Collections;

public class CardDragSpawner : MonoBehaviour, IBeginDragHandler, IDragHandler, IEndDragHandler
{
    public GameObject unitPrefab; // üß± –ü—Ä–µ—Ñ–∞–± —é–Ω—ñ—Ç–∞, —è–∫–æ–≥–æ —Ü—è –∫–∞—Ä—Ç–∞ —Å–ø–∞–≤–Ω–∏—Ç—å
    public Transform spawnPoint;  // üìå –ó–≤—ñ–¥–∫–∏ —é–Ω—ñ—Ç –ª–µ—Ç–∏—Ç—å (–∑–∞–∑–≤–∏—á–∞–π = –ø–æ–∑–∏—Ü—ñ—è –∫–∞—Ä—Ç–∏)

    private Vector3 originalPosition;
    private Transform originalParent;
    private CanvasGroup canvasGroup;
    private RectTransform rectTransform;
    private Image cardImage;
    private Canvas canvas;

    public float cooldownTime = 3f;
    private bool isOnCooldown = false;
    private bool isInSlot = false;
    private Transform currentSlot = null;
    public int unitCost = 30; // üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å —Ü—ñ—î—ó –∫–∞—Ä—Ç–∏

    // üÜï –°–ò–°–¢–ï–ú–ê –í–Ü–î–°–¢–ï–ñ–ï–ù–ù–Ø –Æ–ù–Ü–¢–ê
    private GameObject currentUnit = null; // –ü–æ—Ç–æ—á–Ω–∏–π —é–Ω—ñ—Ç, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Ü—ñ—î—é –∫–∞—Ä—Ç–æ—é
    private bool hasActiveUnit = false; // –ß–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —é–Ω—ñ—Ç

    // üéÆ –†–ï–ñ–ò–ú–ò –ö–ê–†–¢–ò
    public enum CardMode
    {
        Selection,  // –†–µ–∂–∏–º –≤–∏–±–æ—Ä—É - –º–æ–∂–Ω–∞ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞—Ç–∏ –º—ñ–∂ —Å–ª–æ—Ç–∞–º–∏
        Gameplay    // –Ü–≥—Ä–æ–≤–∏–π —Ä–µ–∂–∏–º - –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è —Å–ø–∞–≤–Ω—É
    }

    [Header("Card Mode Settings")]
    public CardMode currentMode = CardMode.Selection;
    private bool isGameActive = false; // –ß–∏ –∞–∫—Ç–∏–≤–Ω–∞ –≥—Ä–∞

    void Awake()
    {
        canvasGroup = GetComponent<CanvasGroup>();
        rectTransform = GetComponent<RectTransform>();
        cardImage = GetComponent<Image>();
        canvas = GetComponentInParent<Canvas>();
        
        // –Ø–∫—â–æ –Ω–µ–º–∞—î CanvasGroup - –¥–æ–¥–∞—î–º–æ
        if (canvasGroup == null)
            canvasGroup = gameObject.AddComponent<CanvasGroup>();
    }

    void Start()
    {
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é —Ç–∞ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –æ–±'—î–∫—Ç
        originalPosition = rectTransform.anchoredPosition;
        originalParent = transform.parent;
        
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤–Ω—É –Ω–µ–ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ CanvasGroup
        SetCardAlpha(1f);
        
        // –ü–æ—á–∏–Ω–∞—î–º–æ –≤ —Ä–µ–∂–∏–º—ñ –≤–∏–±–æ—Ä—É
        SetMode(CardMode.Selection);
    }

    // üÜï –ú–ï–¢–û–î –î–õ–Ø –û–ù–û–í–õ–ï–ù–ù–Ø –°–¢–ê–¢–£–°–£ –Æ–ù–Ü–¢–ê
    void Update()
    {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω —é–Ω—ñ—Ç–∞ –∫–æ–∂–µ–Ω –∫–∞–¥—Ä
        if (hasActiveUnit && currentUnit == null)
        {
            // –Æ–Ω—ñ—Ç –±—É–≤ –∑–Ω–∏—â–µ–Ω–∏–π - –∑–Ω—ñ–º–∞—î–º–æ –∫—É–ª–¥–∞—É–Ω
            OnUnitDestroyed();
        }
    }

    // üÜï –ú–ï–¢–û–î –í–ò–ö–õ–ò–ö–ê–Ñ–¢–¨–°–Ø –ö–û–õ–ò –Æ–ù–Ü–¢ –ü–û–ú–ò–†–ê–Ñ
    public void OnUnitDestroyed()
    {
        Debug.Log($"Unit destroyed for card: {gameObject.name}");
        
        hasActiveUnit = false;
        currentUnit = null;
        
        // –ó–Ω—ñ–º–∞—î–º–æ –∫—É–ª–¥–∞—É–Ω —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–∞—Ä—Ç—É –≤ —Ä–æ–±–æ—á–∏–π —Å—Ç–∞–Ω
        isOnCooldown = false;
        SetCardAlpha(1f);
        
        // üîÑ –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
        UpdateVisualMode();
        
        // –ó—É–ø–∏–Ω—è—î–º–æ –≤—Å—ñ –∫–æ—Ä—É—Ç–∏–Ω–∏ –∫—É–ª–¥–∞—É–Ω—É
        StopAllCoroutines();
    }

    // üéÆ –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –†–ï–ñ–ò–ú–ê–ú–ò
    public void SetMode(CardMode mode)
    {
        currentMode = mode;
        UpdateVisualMode();
    }

    public void StartGame()
    {
        isGameActive = true;
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∏ –≤ —Å–ª–æ—Ç–∞—Ö –≤ —ñ–≥—Ä–æ–≤–∏–π —Ä–µ–∂–∏–º
        if (isInSlot)
        {
            SetMode(CardMode.Gameplay);
        }
    }

    public void StopGame()
    {
        isGameActive = false;
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∏ –≤ —Ä–µ–∂–∏–º –≤–∏–±–æ—Ä—É
        SetMode(CardMode.Selection);
        
        // üÜï –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —é–Ω—ñ—Ç–∞ –ø—Ä–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—ñ –≥—Ä–∏
        if (hasActiveUnit)
        {
            OnUnitDestroyed();
        }
    }

    private void UpdateVisualMode()
    {
        // üîÑ –û–ù–û–í–õ–ï–ù–û: –í—ñ–∑—É–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∂–∏–º—É —ñ —Å—Ç–∞–Ω—É –∫—É–ª–¥–∞—É–Ω—É
        if (cardImage != null)
        {
            // üî¥ –ü–ï–†–ï–í–Ü–†–Ø–Ñ–ú–û –ö–£–õ–î–ê–£–ù –ü–ï–†–®–ò–ú
            if (isOnCooldown || hasActiveUnit)
            {
                // –ß–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä –ø—ñ–¥ —á–∞—Å –∫—É–ª–¥–∞—É–Ω—É –∞–±–æ –ø–æ–∫–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —é–Ω—ñ—Ç
                cardImage.color = Color.red;
                return;
            }

            // –Ø–∫—â–æ –Ω–µ–º–∞—î –∫—É–ª–¥–∞—É–Ω—É - –ø–æ–∫–∞–∑—É—î–º–æ –∑–≤–∏—á–∞–π–Ω—ñ –∫–æ–ª—å–æ—Ä–∏
            switch (currentMode)
            {
                case CardMode.Selection:
                    // –ë—ñ–ª–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è —Ä–µ–∂–∏–º—É –≤–∏–±–æ—Ä—É
                    cardImage.color = Color.white;
                    break;
                case CardMode.Gameplay:
                    // –ë—ñ–ª–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è —ñ–≥—Ä–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É (–∫–æ–ª–∏ –Ω–µ–º–∞—î –∫—É–ª–¥–∞—É–Ω—É)
                    cardImage.color = Color.white;
                    break;
            }
        }
    }

    private void SetCardAlpha(float alpha)
    {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ CanvasGroup –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ
        if (canvasGroup != null)
        {
            canvasGroup.alpha = alpha;
        }
    }

    // üîÑ –û–ù–û–í–õ–ï–ù–ò–ô –ú–ï–¢–û–î –ö–£–õ–î–ê–£–ù–£
    private IEnumerator Cooldown()
    {
        isOnCooldown = true;

        // üî¥ –†–æ–±–∏–º–æ —Ç—Ä–æ—Ö–∏ –ø—Ä–æ–∑–æ—Ä—ñ—à–æ—é –ø—ñ–¥ —á–∞—Å –∫—É–ª–¥–∞—É–Ω—É
        SetCardAlpha(0.5f);
        
        // üîÑ –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω (—á–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä)
        UpdateVisualMode();

        yield return new WaitForSeconds(cooldownTime);

        // üÜï –ü—ñ—Å–ª—è –∫–ª–∞—Å–∏—á–Ω–æ–≥–æ –∫—É–ª–¥–∞—É–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω —é–Ω—ñ—Ç–∞
        if (hasActiveUnit)
        {
            Debug.Log($"Unit is still alive for card: {gameObject.name}, keeping cooldown active");
            
            // –Ø–∫—â–æ —é–Ω—ñ—Ç —â–µ –∂–∏–≤–∏–π - –∑–∞–ª–∏—à–∞—î–º–æ –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–Ω–∏–º
            // –ö—É–ª–¥–∞—É–Ω –±—É–¥–µ –∑–Ω—è—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤ OnUnitDestroyed()
            yield break;
        }

        // –Ø–∫—â–æ —é–Ω—ñ—Ç–∞ –Ω–µ–º–∞—î - –∑–Ω—ñ–º–∞—î–º–æ –∫—É–ª–¥–∞—É–Ω
        isOnCooldown = false;
        SetCardAlpha(1f);
        
        // üîÑ –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω (–±—ñ–ª–∏–π –∫–æ–ª—ñ—Ä)
        UpdateVisualMode();
    }

    public void OnBeginDrag(PointerEventData eventData)
    {
        // üÜï –ë–ª–æ–∫—É—î–º–æ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è —è–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∏–π —é–Ω—ñ—Ç
        if (isOnCooldown || hasActiveUnit) return;

        // üéÆ –ü–ï–†–ï–í–Ü–†–ö–ê –†–ï–ñ–ò–ú–£
        if (currentMode == CardMode.Gameplay && !CanUseInGameplay())
        {
            return; // –ë–ª–æ–∫—É—î–º–æ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è —è–∫—â–æ –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏
        }

        canvasGroup.blocksRaycasts = false;
        
        // üîß –í–ê–ñ–õ–ò–í–û: –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –∫–∞—Ä—Ç—É –Ω–∞ –≤–µ—Ä—Ö–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ
        transform.SetAsLastSibling();
        
        // –ü—ñ–¥ —á–∞—Å –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑–∞–ª–∏—à–∞—î–º–æ –∫–∞—Ä—Ç—É –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∏–º–æ—é
        SetCardAlpha(1f);
    }

    private bool CanUseInGameplay()
    {
        // –í —ñ–≥—Ä–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ –∫–∞—Ä—Ç—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–∞ –≤ —Å–ª–æ—Ç—ñ —ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —é–Ω—ñ—Ç–∞
        return isInSlot && isGameActive && !hasActiveUnit;
    }

    public void OnDrag(PointerEventData eventData)
    {
        if (isOnCooldown || hasActiveUnit) return;
        
        // üéÆ –û–î–ù–ê–ö–û–í–ï –ü–ï–†–ï–¢–Ø–ì–£–í–ê–ù–ù–Ø –î–õ–Ø –û–ë–û–• –†–ï–ñ–ò–ú–Ü–í
        DragCard(eventData);
    }

    private void DragCard(PointerEventData eventData)
    {
        // üåç –ü–†–ê–í–ò–õ–¨–ù–ê –ö–û–ù–í–ï–†–¢–ê–¶–Ü–Ø –î–õ–Ø WORLD SPACE CANVAS
        if (canvas.renderMode == RenderMode.WorldSpace)
        {
            // –î–ª—è World Space Canvas –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –µ–∫—Ä–∞–Ω–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ —Å–≤—ñ—Ç–æ–≤—ñ
            Vector3 worldPosition = Camera.main.ScreenToWorldPoint(new Vector3(eventData.position.x, eventData.position.y, Camera.main.WorldToScreenPoint(transform.position).z));
            transform.position = worldPosition;
        }
        else
        {
            // –î–ª—è Screen Space Canvas
            Vector2 localPoint;
            RectTransformUtility.ScreenPointToLocalPointInRectangle(
                canvas.transform as RectTransform,
                eventData.position,
                canvas.worldCamera,
                out localPoint
            );
            rectTransform.anchoredPosition = localPoint;
        }
    }

    public void OnEndDrag(PointerEventData eventData)
    {
        canvasGroup.blocksRaycasts = true;

        // üéÆ –†–Ü–ó–ù–ê –ü–û–í–ï–î–Ü–ù–ö–ê –ó–ê –†–ï–ñ–ò–ú–ê–ú–ò
        if (currentMode == CardMode.Selection)
        {
            HandleSelectionDrop(eventData);
        }
        else if (currentMode == CardMode.Gameplay)
        {
            HandleGameplayDrop(eventData);
        }
    }

    private void HandleSelectionDrop(PointerEventData eventData)
    {
        // –í —Ä–µ–∂–∏–º—ñ –≤–∏–±–æ—Ä—É –ø—Ä–∞—Ü—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑—ñ —Å–ª–æ—Ç–∞–º–∏
        GameObject slotObject = GetSlotUnderCursor(eventData);
        if (slotObject != null)
        {
            CardSlot slot = slotObject.GetComponent<CardSlot>();
            if (slot != null && slot.IsEmpty())
            {
                // –Ø–∫—â–æ –º–∏ –±—É–ª–∏ –≤ —ñ–Ω—à–æ–º—É —Å–ª–æ—Ç—ñ - –∑–≤—ñ–ª—å–Ω—è—î–º–æ –π–æ–≥–æ
                if (currentSlot != null)
                {
                    CardSlot previousSlot = currentSlot.GetComponent<CardSlot>();
                    if (previousSlot != null)
                        previousSlot.RemoveCard();
                }

                // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –∫–∞—Ä—Ç—É –≤ –Ω–æ–≤–∏–π —Å–ª–æ—Ç
                PlaceInSlot(slot);
                return;
            }
        }

        // –Ø–∫—â–æ –Ω–µ –≤ —Å–ª–æ—Ç - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞ –ø–æ—Ç–æ—á–Ω—É –ø–æ–∑–∏—Ü—ñ—é
        ReturnToCurrentPosition();
        SetCardAlpha(1f);
    }

    private void HandleGameplayDrop(PointerEventData eventData)
    {
        // üåç –ü–†–ê–í–ò–õ–¨–ù–ê –ö–û–ù–í–ï–†–¢–ê–¶–Ü–Ø –ö–û–û–†–î–ò–ù–ê–¢ –î–õ–Ø WORLD SPACE CANVAS
        Vector3 worldPos;
        
        if (canvas.renderMode == RenderMode.WorldSpace)
        {
            // –î–ª—è World Space Canvas - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–∏–±–∏–Ω—É Canvas'–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
            float canvasDistance = Camera.main.WorldToScreenPoint(canvas.transform.position).z;
            worldPos = Camera.main.ScreenToWorldPoint(new Vector3(eventData.position.x, eventData.position.y, canvasDistance));
        }
        else
        {
            // –î–ª—è Screen Space Canvas
            worldPos = Camera.main.ScreenToWorldPoint(new Vector3(eventData.position.x, eventData.position.y, Camera.main.nearClipPlane));
        }
        
        Vector2 worldPos2D = new Vector2(worldPos.x, worldPos.y);
        
        // –í—ñ–¥–ª–∞–¥–æ—á–Ω–∏–π –≤–∏–≤—ñ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        Debug.Log($"Screen: {eventData.position}, World: {worldPos2D}, Canvas Mode: {canvas.renderMode}");
        
        // üî• –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —à–∞—Ä–∏ –¥–ª—è —Ä–∞–π–∫–∞—Å—Ç—É
        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Å–∫—É —à–∞—Ä—ñ–≤, —è–∫–∞ –≤–∫–ª—é—á–∞—î —Ç—ñ–ª—å–∫–∏ –∑–æ–Ω–∏ (–≤–∏–∫–ª—é—á–∞—é—á–∏ —é–Ω—ñ—Ç—ñ–≤)
        int zoneMask = 1 << LayerMask.NameToLayer("Zone"); // –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–æ–º–µ—Ä —à–∞—Ä—É
        
        // –ú–µ—Ç–æ–¥ 1: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä–∞–π–∫–∞—Å—Ç –∑ –º–∞—Å–∫–æ—é —à–∞—Ä—ñ–≤
        RaycastHit2D hit = Physics2D.Raycast(worldPos2D, Vector2.zero, Mathf.Infinity, zoneMask);
        
        // –ú–µ—Ç–æ–¥ 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± - –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –≤—Å—ñ –∑–æ–Ω–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ
        ZoneController targetZone = FindZoneAtPosition(worldPos2D);
        
        if (targetZone != null)
        {
            Debug.Log($"Found zone: {targetZone.name}");
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–æ–Ω–∞ –¥—ñ–π—Å–Ω–æ –≤—ñ–ª—å–Ω–∞ (–Ω–µ –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ —é–Ω—ñ—Ç—ñ–≤ —â–æ –ø—Ä–æ–±—ñ–≥–∞—é—Ç—å)
            if (!targetZone.hasUnit)
            {
                if (!GoldManager.Instance.TrySpendGold(unitCost))
                {
                    Debug.Log("‚ùå Not enough gold!");
                    ReturnToCurrentPosition();
                    SetCardAlpha(1f);
                    return;
                }

                Vector3 zoneCenter = targetZone.transform.position;

                // üÜï –°–¢–í–û–†–Æ–Ñ–ú–û –Æ–ù–Ü–¢ –Ü –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –ü–û–°–ò–õ–ê–ù–ù–Ø
                GameObject unit = Instantiate(unitPrefab, spawnPoint.position, Quaternion.identity);
                currentUnit = unit;
                hasActiveUnit = true;
                
                if (unit.TryGetComponent<Unit>(out Unit unitScript))
                {
                    unitScript.SetTargetPosition(zoneCenter);
                    unitScript.AssignZone(targetZone);
                    
                    // üÜï –î–û–î–ê–Ñ–ú–û –ü–û–°–ò–õ–ê–ù–ù–Ø –ù–ê –ö–ê–†–¢–£ –í –Æ–ù–Ü–¢
                    unitScript.SetOwnerCard(this);
                }

                targetZone.hasUnit = true;
                
                // üîÑ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ —Å–ª–æ—Ç
                ReturnToCurrentPosition();
                
                // –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ –ø–æ–≤–Ω—É –Ω–µ–ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å –ø–µ—Ä–µ–¥ –∫—É–ª–¥–∞—É–Ω–æ–º
                SetCardAlpha(1f);
                
                // üÜï –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
                UpdateVisualMode();
                
                StartCoroutine(Cooldown());
                return;
            }
        }
        else
        {
            Debug.Log("No zone found at position");
        }

        // –Ø–∫—â–æ –Ω–µ –≤ –∑–æ–Ω—É - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ —Å–ª–æ—Ç
        ReturnToCurrentPosition();
        SetCardAlpha(1f);
    }

    // üî• –ù–û–í–ò–ô –ú–ï–¢–û–î: –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∑–æ–Ω–∏ –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é –±–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–∞–π–∫–∞—Å—Ç—É
    private ZoneController FindZoneAtPosition(Vector2 worldPosition)
    {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –∑–æ–Ω–∏ –≤ —Å—Ü–µ–Ω—ñ (–æ–Ω–æ–≤–ª–µ–Ω–∏–π –º–µ—Ç–æ–¥)
        ZoneController[] allZones = FindObjectsByType<ZoneController>(FindObjectsSortMode.None);
        
        foreach (ZoneController zone in allZones)
        {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–æ—á–∫–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –º–µ–∂–∞—Ö –∑–æ–Ω–∏
            if (IsPointInZone(worldPosition, zone))
            {
                return zone;
            }
        }
        
        return null;
    }

    // üî• –î–û–ü–û–ú–Ü–ñ–ù–ò–ô –ú–ï–¢–û–î: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç–æ—á–∫–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∑–æ–Ω—ñ
    private bool IsPointInZone(Vector2 point, ZoneController zone)
    {
        // –Ø–∫—â–æ —É –∑–æ–Ω–∏ —î Collider2D
        if (zone.TryGetComponent<Collider2D>(out Collider2D zoneCollider))
        {
            return zoneCollider.bounds.Contains(point);
        }
        
        // –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–æ–ª–∞–π–¥–µ—Ä–∞, –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Transform
        // –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –∑–æ–Ω–∞ –º–∞—î –ø—Ä—è–º–æ–∫—É—Ç–Ω—É —Ñ–æ—Ä–º—É
        Vector3 zonePos = zone.transform.position;
        Vector3 zoneScale = zone.transform.localScale;
        
        // –ü—Ä–æ—Å—Ç–∏–π AABB (Axis-Aligned Bounding Box) —Ç–µ—Å—Ç
        return (point.x >= zonePos.x - zoneScale.x/2 && 
                point.x <= zonePos.x + zoneScale.x/2 &&
                point.y >= zonePos.y - zoneScale.y/2 && 
                point.y <= zonePos.y + zoneScale.y/2);
    }

    private GameObject GetSlotUnderCursor(PointerEventData eventData)
    {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ EventSystem –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è UI –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø—ñ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        var results = new System.Collections.Generic.List<RaycastResult>();
        EventSystem.current.RaycastAll(eventData, results);

        foreach (var result in results)
        {
            if (result.gameObject.CompareTag("Slot"))
            {
                return result.gameObject;
            }
        }
        return null;
    }

    private void PlaceInSlot(CardSlot slot)
    {
        // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –∫–∞—Ä—Ç—É –≤ —Å–ª–æ—Ç
        transform.SetParent(slot.transform);
        rectTransform.anchoredPosition = Vector2.zero;
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
        isInSlot = true;
        currentSlot = slot.transform;
        slot.PlaceCard(this);

        // –Ø–∫—â–æ –≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —ñ–≥—Ä–æ–≤–∏–π —Ä–µ–∂–∏–º
        if (isGameActive)
        {
            SetMode(CardMode.Gameplay);
        }
    }

    private void ReturnToCurrentPosition()
    {
        if (isInSlot && currentSlot != null)
        {
            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ª–æ—Ç
            transform.SetParent(currentSlot);
            rectTransform.anchoredPosition = Vector2.zero;
        }
        else
        {
            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞ –ø–æ—á–∞—Ç–∫–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
            transform.SetParent(originalParent);
            rectTransform.anchoredPosition = originalPosition;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–Ω—è—Ç—Ç—è –∫–∞—Ä—Ç–∏ –∑—ñ —Å–ª–æ—Ç–∞ (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è CardSlot)
    public void RemoveFromSlot()
    {
        // –í —ñ–≥—Ä–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ –Ω–µ –º–æ–∂–Ω–∞ –∑–Ω—ñ–º–∞—Ç–∏ –∫–∞—Ä—Ç–∏ –∑—ñ —Å–ª–æ—Ç—ñ–≤
        if (currentMode == CardMode.Gameplay && isGameActive)
        {
            return;
        }

        if (currentSlot != null)
        {
            CardSlot slot = currentSlot.GetComponent<CardSlot>();
            if (slot != null)
                slot.RemoveCard();
        }

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–∞—Ä—Ç—É –Ω–∞ –ø–æ—á–∞—Ç–∫–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
        transform.SetParent(originalParent);
        rectTransform.anchoredPosition = originalPosition;
        
        isInSlot = false;
        currentSlot = null;

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ —Ä–µ–∂–∏–º –≤–∏–±–æ—Ä—É
        SetMode(CardMode.Selection);
    }
}