using UnityEngine;
using UnityEngine.UI;
using TMPro;

/// <summary>
/// UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≥–µ—Ä–æ—ó–≤
/// </summary>
public class HeroMovementUI : MonoBehaviour
{
    [Header("UI –µ–ª–µ–º–µ–Ω—Ç–∏")]
    public TextMeshProUGUI movementInfoText;
    public Image movementIndicator;
    public Button cancelMovementButton;
    
    [Header("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
    public Color movementColor = Color.cyan;
    public Color normalColor = Color.white;
    
    private Card selectedCardForMovement;
    
    void Start()
    {
        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        if (cancelMovementButton != null)
        {
            cancelMovementButton.onClick.AddListener(CancelMovement);
        }
        
        // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
        SetMovementUI(false);
    }
    
    void Update()
    {
        UpdateMovementInfo();
    }
    
    /// <summary>
    /// –û–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
    /// </summary>
    private void UpdateMovementInfo()
    {
        // –®—É–∫–∞—î–º–æ –∫–∞—Ä—Ç—É, –≤–∏–±—Ä–∞–Ω—É –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
        Card movementCard = FindMovementCard();
        
        if (movementCard != null && movementCard.IsSelectedForMovement())
        {
            selectedCardForMovement = movementCard;
            ShowMovementInfo(movementCard);
        }
        else
        {
            selectedCardForMovement = null;
            HideMovementInfo();
        }
    }
    
    /// <summary>
    /// –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∫–∞—Ä—Ç—É, –≤–∏–±—Ä–∞–Ω—É –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
    /// </summary>
    private Card FindMovementCard()
    {
        Card[] allCards = FindObjectsByType<Card>(FindObjectsSortMode.None);
        foreach (Card card in allCards)
        {
            if (card.IsSelectedForMovement())
            {
                return card;
            }
        }
        return null;
    }
    
    /// <summary>
    /// –ü–æ–∫–∞–∑—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
    /// </summary>
    private void ShowMovementInfo(Card card)
    {
        SetMovementUI(true);
        
        if (movementInfoText != null)
        {
            movementInfoText.text = card.GetMovementInfo();
        }
        
        if (movementIndicator != null)
        {
            movementIndicator.color = movementColor;
        }
        
        Debug.Log($"üéØ UI: –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è - {card.GetMovementInfo()}");
    }
    
    /// <summary>
    /// –ü—Ä–∏—Ö–æ–≤—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
    /// </summary>
    private void HideMovementInfo()
    {
        SetMovementUI(false);
        
        if (movementInfoText != null)
        {
            movementInfoText.text = "";
        }
        
        if (movementIndicator != null)
        {
            movementIndicator.color = normalColor;
        }
    }
    
    /// <summary>
    /// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –≤–∏–¥–∏–º—ñ—Å—Ç—å UI –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
    /// </summary>
    private void SetMovementUI(bool visible)
    {
        if (movementIndicator != null)
        {
            movementIndicator.gameObject.SetActive(visible);
        }
        
        if (cancelMovementButton != null)
        {
            cancelMovementButton.gameObject.SetActive(visible);
        }
    }
    
    /// <summary>
    /// –°–∫–∞—Å–æ–≤—É—î –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
    /// </summary>
    public void CancelMovement()
    {
        if (selectedCardForMovement != null)
        {
            selectedCardForMovement.DeselectCard();
            Debug.Log("‚ùå –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≥–µ—Ä–æ—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ");
        }
    }
    
    /// <summary>
    /// –ü—É–±–ª—ñ—á–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
    /// </summary>
    public void ForceUpdate()
    {
        UpdateMovementInfo();
    }
    
    void OnDestroy()
    {
        if (cancelMovementButton != null)
        {
            cancelMovementButton.onClick.RemoveAllListeners();
        }
    }
} 