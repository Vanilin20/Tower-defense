using UnityEngine;

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ä—É—Ö–æ–º –≥–µ—Ä–æ—è –¥–æ –∑–æ–Ω–∏
public class ZoneMovement : MonoBehaviour
{
    private Vector3 targetPosition;
    private Zone targetZone;
    private bool hasReachedZone = false;
    private float moveSpeed; // –®–≤–∏–¥–∫—ñ—Å—Ç—å —Ä—É—Ö—É –¥–æ –∑–æ–Ω–∏ (–±—É–¥–µ –≤–∑—è—Ç–∞ –∑ Unit)
    private float stopDistance = 0.1f; // –í—ñ–¥—Å—Ç–∞–Ω—å –Ω–∞ —è–∫—ñ–π –≥–µ—Ä–æ–π –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è
    
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
    private Unit unitComponent;
    private Hero heroComponent;
    private bool wasUnitEnabled = true;
    private bool wasHeroEnabled = true;
    
    // –°—Ç–∞–Ω —Ä—É—Ö—É
    private bool isInCombat = false;
    private bool isMovingToZone = true;
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
    [Header("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä—É—Ö—É")]
    public bool allowCombatDuringMovement = true; // –î–æ–∑–≤–æ–ª–∏—Ç–∏ –±—ñ–π –ø—ñ–¥ —á–∞—Å —Ä—É—Ö—É
    public float combatResumeDelay = 1f; // –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º –¥–æ —Ä—É—Ö—É –ø—ñ—Å–ª—è –±–æ—é
    private float combatEndTime = 0f;

    public void Initialize(Vector3 zonePosition, Zone zone)
    {
        targetPosition = zonePosition;
        targetZone = zone;
        hasReachedZone = false;

        // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        unitComponent = GetComponent<Unit>();
        heroComponent = GetComponent<Hero>();
        
        if (unitComponent != null)
        {
            moveSpeed = unitComponent.moveSpeed;
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω Unit –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            wasUnitEnabled = unitComponent.enabled;
        }
        else
        {
            moveSpeed = 5f; // –†–µ–∑–µ—Ä–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—â–æ –Ω–µ–º–∞—î Unit –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            Debug.LogWarning($"‚ö†Ô∏è {gameObject.name} –Ω–µ –º–∞—î Unit –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É —à–≤–∏–¥–∫—ñ—Å—Ç—å");
        }

        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø–æ–≤–µ–¥—ñ–Ω–∫—É –ø—ñ–¥ —á–∞—Å —Ä—É—Ö—É –¥–æ –∑–æ–Ω–∏
        SetupCombatDuringMovement();

        Debug.Log($"üéØ {gameObject.name} –ø–æ—á–∏–Ω–∞—î —Ä—É—Ö –¥–æ –∑–æ–Ω–∏ –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó {zonePosition}");
    }

    void Update()
    {
        if (hasReachedZone || targetZone == null)
            return;

        // –û–±—á–∏—Å–ª—é—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —Ü—ñ–ª—å–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
        float distanceToTarget = Vector3.Distance(transform.position, targetPosition);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ—Å—è–≥–ª–∏ –∑–æ–Ω–∏
        if (distanceToTarget <= stopDistance)
        {
            OnReachedZone();
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –±–æ—é
        CheckCombatState();

        // –Ø–∫—â–æ –Ω–µ –≤ –±–æ—é —ñ —Ä—É—Ö–∞—î–º–æ—Å—è –¥–æ –∑–æ–Ω–∏ - —Ä—É—Ö–∞—î–º–æ—Å—è
        if (!isInCombat && isMovingToZone)
        {
            MoveTowardsZone();
        }
    }

    private void CheckCombatState()
    {
        if (!allowCombatDuringMovement) return;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥–µ—Ä–æ–π –≤ –±–æ—é
        bool currentlyInCombat = false;
        if (unitComponent != null)
        {
            currentlyInCombat = (unitComponent.currentTarget != null && !unitComponent.currentTarget.isDead);
        }
        
        // –Ø–∫—â–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –±—ñ–π
        if (currentlyInCombat && !isInCombat)
        {
            EnterCombat();
        }
        // –Ø–∫—â–æ –≤–∏–π—à–ª–∏ –∑ –±–æ—é
        else if (!currentlyInCombat && isInCombat)
        {
            ExitCombat();
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ä—É—Ö—É –ø—ñ—Å–ª—è –±–æ—é
        if (!isInCombat && !isMovingToZone && Time.time >= combatEndTime)
        {
            ResumeMovementToZone();
        }
    }
    
    private void EnterCombat()
    {
        isInCombat = true;
        isMovingToZone = false;
        Debug.Log($"‚öîÔ∏è {gameObject.name} –≤—Å—Ç—É–ø–∞—î –≤ –±—ñ–π –ø—ñ–¥ —á–∞—Å —Ä—É—Ö—É –¥–æ –∑–æ–Ω–∏");
        
        // –ó—É–ø–∏–Ω—è—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –±—ñ–≥—É
        if (unitComponent != null)
        {
            AnimationUtils.SetRunning(unitComponent, false);
        }
    }
    
    private void ExitCombat()
    {
        isInCombat = false;
        combatEndTime = Time.time + combatResumeDelay;
        Debug.Log($"üõ°Ô∏è {gameObject.name} –≤–∏–π—à–æ–≤ –∑ –±–æ—é, –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ —Ä—É—Ö—É —á–µ—Ä–µ–∑ {combatResumeDelay}—Å");
    }
    
    private void ResumeMovementToZone()
    {
        isMovingToZone = true;
        Debug.Log($"üéØ {gameObject.name} –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ —Ä—É—Ö—É –¥–æ –∑–æ–Ω–∏");
    }

    private void SetupCombatDuringMovement()
    {
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        if (unitComponent != null)
        {
            wasUnitEnabled = unitComponent.enabled;
        }
        
        if (heroComponent != null)
        {
            wasHeroEnabled = heroComponent.enabled;
        }
        
        Debug.Log($"üéØ {gameObject.name} - –Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ä—É—Ö –¥–æ –∑–æ–Ω–∏ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –±–æ—é");
    }

    private void MoveTowardsZone()
    {
        // –û–±—á–∏—Å–ª—é—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫ —Ä—É—Ö—É
        Vector3 direction = (targetPosition - transform.position).normalized;
        
        // –†—É—Ö–∞—î–º–æ—Å—è –¥–æ —Ü—ñ–ª—ñ
        transform.position += direction * moveSpeed * Time.deltaTime;

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–µ—Ä–æ—è –≤ —Å—Ç–æ—Ä–æ–Ω—É —Ä—É—Ö—É (–¥–ª—è 2D)
        SpriteRotationUtils.RotateSpriteByTag(transform, direction);
        
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –±—ñ–≥—É
        if (unitComponent != null)
        {
            AnimationUtils.SetRunning(unitComponent, true);
        }
    }

    private void OnReachedZone()
    {
        hasReachedZone = true;

        // –ó—É–ø–∏–Ω—è—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –±—ñ–≥—É
        if (unitComponent != null)
        {
            AnimationUtils.SetRunning(unitComponent, false);
        }

        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∑–æ–Ω—É, —â–æ –≥–µ—Ä–æ–π –¥–æ—Å—è–≥–Ω—É–≤ —ó—ó
        if (targetZone != null)
        {
            targetZone.OnHeroReachedZone(gameObject);
        }

        // –°–ø–æ–≤—ñ—â–∞—î–º–æ HeroController –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–æ–Ω–∏
        HeroController heroController = GetComponent<HeroController>();
        if (heroController != null)
        {
            // HeroController —Ç–µ–ø–µ—Ä –∑–Ω–∞—î, —â–æ –≥–µ—Ä–æ–π –¥–æ—Å—è–≥–Ω—É–≤ –∑–æ–Ω–∏
            // —ñ –º–æ–∂–µ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏
        }

        Debug.Log($"üõ°Ô∏è {gameObject.name} –≥–æ—Ç–æ–≤–∏–π –¥–æ –±–æ—é –≤ –∑–æ–Ω—ñ!");

        // –í–∏–¥–∞–ª—è—î–º–æ —Ü–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –æ—Å–∫—ñ–ª—å–∫–∏ —Ä—É—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        Destroy(this);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–º—ñ–Ω–∏ —à–≤–∏–¥–∫–æ—Å—Ç—ñ —Ä—É—Ö—É (–º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∑–∑–æ–≤–Ω—ñ)
    public void SetMoveSpeed(float speed)
    {
        moveSpeed = speed;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–º—ñ–Ω–∏ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –∑—É–ø–∏–Ω–∫–∏
    public void SetStopDistance(float distance)
    {
        stopDistance = distance;
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –∑—É–ø–∏–Ω–µ–Ω–Ω—è —Ä—É—Ö—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –≥–µ—Ä–æ–π –∞—Ç–∞–∫–æ–≤–∞–Ω–∏–π)
    public void StopMovement()
    {
        if (!hasReachedZone)
        {
            Debug.Log($"üõë {gameObject.name} - –ø—Ä–∏–º—É—Å–æ–≤–æ –∑—É–ø–∏–Ω—è—î–º–æ —Ä—É—Ö –¥–æ –∑–æ–Ω–∏");
            Destroy(this);
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –∑ –≤–æ—Ä–æ–≥–∞–º–∏
    public void SetCombatBehavior(bool allowCombat, float resumeDelay)
    {
        allowCombatDuringMovement = allowCombat;
        combatResumeDelay = resumeDelay;
    }

    // –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –≤ Scene View
    void OnDrawGizmos()
    {
        if (targetZone != null)
        {
            // –ú–∞–ª—é—î–º–æ –ª—ñ–Ω—ñ—é –¥–æ —Ü—ñ–ª—å–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
            Gizmos.color = isInCombat ? Color.red : Color.green;
            Gizmos.DrawLine(transform.position, targetPosition);
            
            // –ú–∞–ª—é—î–º–æ —Å—Ñ–µ—Ä—É –≤ —Ü—ñ–ª—å–æ–≤—ñ–π –ø–æ–∑–∏—Ü—ñ—ó
            Gizmos.color = Color.blue;
            Gizmos.DrawWireSphere(targetPosition, stopDistance);
            
            // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞–Ω
            if (isInCombat)
            {
                Gizmos.color = Color.red;
                Gizmos.DrawWireSphere(transform.position + Vector3.up, 0.5f);
            }
            else if (!isMovingToZone)
            {
                Gizmos.color = Color.yellow;
                Gizmos.DrawWireSphere(transform.position + Vector3.up, 0.3f);
            }
        }
    }
    
    // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∑–Ω–∏—â–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞
    void OnDestroy()
    {
        // –õ–æ–≥—É—î–º–æ –∑–Ω–∏—â–µ–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        if (!hasReachedZone)
        {
            Debug.Log($"üóëÔ∏è {gameObject.name} - ZoneMovement –∑–Ω–∏—â–µ–Ω–∏–π –¥–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–æ–Ω–∏");
        }
    }
}