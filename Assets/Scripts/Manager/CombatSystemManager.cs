using UnityEngine;

// –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ–π–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ - –∫–µ—Ä—É—î –≤—Å—ñ–º–∞ —É—Ç–∏–ª—ñ—Ç–∞–º–∏ –±–æ—é
public class CombatSystemManager : MonoBehaviour
{
    public static CombatSystemManager Instance;
    
    [Header("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ–π–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏")]
    [SerializeField] private bool enableDebugLogs = true;
    [SerializeField] private bool enableCombatUtils = true;
    [SerializeField] private bool enableDeathHandler = true;
    
    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
            InitializeCombatSystem();
        }
        else
        {
            Destroy(gameObject);
        }
    }
    
    private void InitializeCombatSystem()
    {
        Debug.Log("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ–π–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏...");
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
        if (HeightManager.Instance == null)
        {
            Debug.LogWarning("‚ö†Ô∏è HeightManager –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°—Ç–≤–æ—Ä—é—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ...");
            CreateHeightManager();
        }
        
        Debug.Log("‚úÖ –ë–æ–π–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!");
    }
    
    private void CreateHeightManager()
    {
        GameObject heightManagerObj = new GameObject("HeightManager");
        heightManagerObj.AddComponent<HeightManager>();
        DontDestroyOnLoad(heightManagerObj);
    }
    
    // –ü—É–±–ª—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–æ—é
    public void EnableCombatUtils(bool enable)
    {
        enableCombatUtils = enable;
        Debug.Log($"üîß CombatUtils: {(enable ? "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" : "–≤–∏–º–∫–Ω–µ–Ω–æ")}");
    }
    
    public void EnableDeathHandler(bool enable)
    {
        enableDeathHandler = enable;
        Debug.Log($"üîß DeathHandler: {(enable ? "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" : "–≤–∏–º–∫–Ω–µ–Ω–æ")}");
    }
    
    public void EnableDebugLogs(bool enable)
    {
        enableDebugLogs = enable;
        Debug.Log($"üîß Debug –ª–æ–≥–∏: {(enable ? "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" : "–≤–∏–º–∫–Ω–µ–Ω–æ")}");
    }
    
    // –ú–µ—Ç–æ–¥–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏
    public bool IsCombatUtilsEnabled() => enableCombatUtils;
    public bool IsDeathHandlerEnabled() => enableDeathHandler;
    public bool IsDebugLogsEnabled() => enableDebugLogs;
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
    public void TestCombatSystem()
    {
        Debug.Log("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ–π–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏...");
        
        // –¢–µ—Å—Ç—É—î–º–æ CombatUtils
        if (enableCombatUtils)
        {
            int testDamage = CombatUtils.CalculateDamage(10, 0.2f, 2f, out bool isCritical);
            Debug.Log($"‚úÖ CombatUtils —Ç–µ—Å—Ç: —à–∫–æ–¥–∞={testDamage}, –∫—Ä–∏—Ç–∏—á–Ω–∏–π={isCritical}");
        }
        
        // –¢–µ—Å—Ç—É—î–º–æ DeathHandler
        if (enableDeathHandler)
        {
            Debug.Log("‚úÖ DeathHandler –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è");
        }
        
        Debug.Log("‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    }
    
    private void OnDestroy()
    {
        if (Instance == this)
        {
            Debug.Log("üîß –ë–æ–π–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –∑—É–ø–∏–Ω–µ–Ω–∞");
        }
    }
} 