using UnityEngine;
using UnityEngine.UI;

public class GameManager : MonoBehaviour
{
    [Header("UI Buttons")]
    public Button startGameButton;

    [Header("Game State")]
    public bool isGameActive = false;
    public bool isGamePaused = true; // –ì—Ä–∞ –Ω–∞ –ø–∞—É–∑—ñ –∑ —Å–∞–º–æ–≥–æ –ø–æ—á–∞—Ç–∫—É

    [Header("Camera Settings")]
    public Camera gameCamera;
    public Transform gameModePosition; // –ü–æ–∑–∏—Ü—ñ—è –∫–∞–º–µ—Ä–∏ –≤ —ñ–≥—Ä–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    public Transform setupModePosition; // –ü–æ–∑–∏—Ü—ñ—è –∫–∞–º–µ—Ä–∏ –≤ —Ä–µ–∂–∏–º—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    public float cameraTransitionSpeed = 2f; // –®–≤–∏–¥–∫—ñ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—É –∫–∞–º–µ—Ä–∏

    [Header("Card Panel Settings")]
    public Transform cardPanel; // –ü–∞–Ω–µ–ª—å –∑ –∫–∞—Ä—Ç–∫–∞–º–∏
    public Transform cardPanelGamePosition; // –ü–æ–∑–∏—Ü—ñ—è –ø–∞–Ω–µ–ª—ñ –≤ —ñ–≥—Ä–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    public Transform cardPanelSetupPosition; // –ü–æ–∑–∏—Ü—ñ—è –ø–∞–Ω–µ–ª—ñ –≤ —Ä–µ–∂–∏–º—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    public float panelTransitionSpeed = 2f; // –®–≤–∏–¥–∫—ñ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—É –ø–∞–Ω–µ–ª—ñ

    private CardDragSpawner[] allCards;
    private Vector3 targetCameraPosition;
    private Quaternion targetCameraRotation;
    private bool isCameraMoving = false;
    
    private Vector3 targetPanelPosition;
    private Quaternion targetPanelRotation;
    private bool isPanelMoving = false;

    void Start()
    {
        // –°—Ç–∞–≤–∏–º–æ –≥—Ä—É –Ω–∞ –ø–∞—É–∑—É –∑ —Å–∞–º–æ–≥–æ –ø–æ—á–∞—Ç–∫—É
        Time.timeScale = 0f;
        isGamePaused = true;
        
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∏ –Ω–∞ —Å—Ü–µ–Ω—ñ
        allCards = FindObjectsByType<CardDragSpawner>(FindObjectsSortMode.None);

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–∞–º–µ—Ä—É, —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞
        if (gameCamera == null)
            gameCamera = Camera.main;

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é –∫–∞–º–µ—Ä–∏ (—Ä–µ–∂–∏–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è)
        if (setupModePosition != null && gameCamera != null)
        {
            gameCamera.transform.position = setupModePosition.position;
            gameCamera.transform.rotation = setupModePosition.rotation;
        }

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é –ø–∞–Ω–µ–ª—ñ (—Ä–µ–∂–∏–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è)
        if (cardPanelSetupPosition != null && cardPanel != null)
        {
            cardPanel.position = cardPanelSetupPosition.position;
            cardPanel.rotation = cardPanelSetupPosition.rotation;
        }

        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É
        if (startGameButton != null)
            startGameButton.onClick.AddListener(StartGame);

        // –ü–æ—á–∞—Ç–∫–æ–≤–æ –≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
        UpdateGameState();
        
        Debug.Log("üéÆ –ì—Ä–∞ –Ω–∞ –ø–∞—É–∑—ñ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü–æ—á–∞—Ç–∏ –≥—Ä—É' –¥–ª—è –ø–æ—á–∞—Ç–∫—É");
    }

    void Update()
    {
        // –ü–ª–∞–≤–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –∫–∞–º–µ—Ä–∏
        if (isCameraMoving && gameCamera != null)
        {
            gameCamera.transform.position = Vector3.Lerp(gameCamera.transform.position, targetCameraPosition, cameraTransitionSpeed * Time.unscaledDeltaTime);
            gameCamera.transform.rotation = Quaternion.Lerp(gameCamera.transform.rotation, targetCameraRotation, cameraTransitionSpeed * Time.unscaledDeltaTime);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—è–≥–ª–∏ —Ü—ñ–ª—å–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
            if (Vector3.Distance(gameCamera.transform.position, targetCameraPosition) < 0.1f)
            {
                gameCamera.transform.position = targetCameraPosition;
                gameCamera.transform.rotation = targetCameraRotation;
                isCameraMoving = false;
            }
        }

        // –ü–ª–∞–≤–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –ø–∞–Ω–µ–ª—ñ –∑ –∫–∞—Ä—Ç–∫–∞–º–∏
        if (isPanelMoving && cardPanel != null)
        {
            cardPanel.position = Vector3.Lerp(cardPanel.position, targetPanelPosition, panelTransitionSpeed * Time.unscaledDeltaTime);
            cardPanel.rotation = Quaternion.Lerp(cardPanel.rotation, targetPanelRotation, panelTransitionSpeed * Time.unscaledDeltaTime);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—è–≥–ª–∏ —Ü—ñ–ª—å–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
            if (Vector3.Distance(cardPanel.position, targetPanelPosition) < 0.1f)
            {
                cardPanel.position = targetPanelPosition;
                cardPanel.rotation = targetPanelRotation;
                isPanelMoving = false;
            }
        }
    }

    public void StartGame()
    {
        isGameActive = true;
        isGamePaused = false;
        
        // –ó–Ω—ñ–º–∞—î–º–æ –≥—Ä—É –∑ –ø–∞—É–∑–∏
        Time.timeScale = 1f;
        
        Debug.Log("üéÆ –ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—è! –ö–∞—Ä—Ç–∏ –≤ —ñ–≥—Ä–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ");

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∏ –≤ —ñ–≥—Ä–æ–≤–∏–π —Ä–µ–∂–∏–º
        foreach (var card in allCards)
        {
            card.StartGame();
        }

        // –ó–º—ñ–Ω—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫–∞–º–µ—Ä–∏ —Ç–∞ –ø–∞–Ω–µ–ª—ñ –Ω–∞ —ñ–≥—Ä–æ–≤—É
        MoveCameraToGameMode();
        MovePanelToGameMode();

        UpdateGameState();
    }

    public void StopGame()
    {
        isGameActive = false;
        isGamePaused = true;
        
        // –°—Ç–∞–≤–∏–º–æ –≥—Ä—É –Ω–∞ –ø–∞—É–∑—É
        Time.timeScale = 0f;
        
        Debug.Log("‚èπÔ∏è –ì—Ä–∞ –∑—É–ø–∏–Ω–µ–Ω–∞! –ö–∞—Ä—Ç–∏ –≤ —Ä–µ–∂–∏–º—ñ –≤–∏–±–æ—Ä—É");

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∏ –≤ —Ä–µ–∂–∏–º –≤–∏–±–æ—Ä—É
        foreach (var card in allCards)
        {
            card.StopGame();
        }

        // –ó–º—ñ–Ω—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫–∞–º–µ—Ä–∏ —Ç–∞ –ø–∞–Ω–µ–ª—ñ –Ω–∞ —Ä–µ–∂–∏–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        MoveCameraToSetupMode();
        MovePanelToSetupMode();

        UpdateGameState();
    }

    private void MoveCameraToGameMode()
    {
        if (gameModePosition != null && gameCamera != null)
        {
            targetCameraPosition = gameModePosition.position;
            targetCameraRotation = gameModePosition.rotation;
            isCameraMoving = true;
            Debug.Log("üì∑ –ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ —ñ–≥—Ä–æ–≤–∏–π —Ä–µ–∂–∏–º");
        }
    }

    private void MoveCameraToSetupMode()
    {
        if (setupModePosition != null && gameCamera != null)
        {
            targetCameraPosition = setupModePosition.position;
            targetCameraRotation = setupModePosition.rotation;
            isCameraMoving = true;
            Debug.Log("üì∑ –ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ —Ä–µ–∂–∏–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è");
        }
    }

    private void MovePanelToGameMode()
    {
        if (cardPanelGamePosition != null && cardPanel != null)
        {
            targetPanelPosition = cardPanelGamePosition.position;
            targetPanelRotation = cardPanelGamePosition.rotation;
            isPanelMoving = true;
            Debug.Log("üÉè –ü–∞–Ω–µ–ª—å –∑ –∫–∞—Ä—Ç–∫–∞–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ —ñ–≥—Ä–æ–≤–∏–π —Ä–µ–∂–∏–º");
        }
    }

    private void MovePanelToSetupMode()
    {
        if (cardPanelSetupPosition != null && cardPanel != null)
        {
            targetPanelPosition = cardPanelSetupPosition.position;
            targetPanelRotation = cardPanelSetupPosition.rotation;
            isPanelMoving = true;
            Debug.Log("üÉè –ü–∞–Ω–µ–ª—å –∑ –∫–∞—Ä—Ç–∫–∞–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ —Ä–µ–∂–∏–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è");
        }
    }

    private void UpdateGameState()
    {
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏
        if (startGameButton != null)
            startGameButton.interactable = !isGameActive;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –≥—Ä–∏ (–º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∑ —ñ–Ω—à–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤)
    public bool IsGameActive()
    {
        return isGameActive;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –≥—Ä–∞ –Ω–∞ –ø–∞—É–∑—ñ
    public bool IsGamePaused()
    {
        return isGamePaused;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –∫–∞–º–µ—Ä–∏ –≤ —ñ–≥—Ä–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    public void SetGameCameraPosition(Vector3 position, Vector3 rotation)
    {
        if (gameModePosition == null)
        {
            GameObject tempObj = new GameObject("GameModePosition");
            gameModePosition = tempObj.transform;
        }
        
        gameModePosition.position = position;
        gameModePosition.rotation = Quaternion.Euler(rotation);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –∫–∞–º–µ—Ä–∏ –≤ —Ä–µ–∂–∏–º—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    public void SetSetupCameraPosition(Vector3 position, Vector3 rotation)
    {
        if (setupModePosition == null)
        {
            GameObject tempObj = new GameObject("SetupModePosition");
            setupModePosition = tempObj.transform;
        }
        
        setupModePosition.position = position;
        setupModePosition.rotation = Quaternion.Euler(rotation);
    }

    // –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –ø–∞–Ω–µ–ª—ñ
    public void SetCardPanelGamePosition(Vector3 position, Vector3 rotation)
    {
        if (cardPanelGamePosition == null)
        {
            GameObject tempObj = new GameObject("CardPanelGamePosition");
            cardPanelGamePosition = tempObj.transform;
        }
        
        cardPanelGamePosition.position = position;
        cardPanelGamePosition.rotation = Quaternion.Euler(rotation);
    }

    public void SetCardPanelSetupPosition(Vector3 position, Vector3 rotation)
    {
        if (cardPanelSetupPosition == null)
        {
            GameObject tempObj = new GameObject("CardPanelSetupPosition");
            cardPanelSetupPosition = tempObj.transform;
        }
        
        cardPanelSetupPosition.position = position;
        cardPanelSetupPosition.rotation = Quaternion.Euler(rotation);
    }
}