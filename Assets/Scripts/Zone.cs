using UnityEngine;
using UnityEngine.EventSystems;

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–æ–Ω–∏ (–ø—Ä–∞—Ü—é—î –∑ –Ω–æ–≤–∏–º–∏ –≤–µ—Ä—Å—ñ—è–º–∏ Unity)
[RequireComponent(typeof(Collider2D))] // –ì–∞—Ä–∞–Ω—Ç—É—î, —â–æ –∑–æ–Ω–∞ –º–∞—î 2D –∫–æ–ª–∞–π–¥–µ—Ä
public class Zone : MonoBehaviour, IPointerClickHandler
{
    [Header("–ó–æ–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
    public static Transform globalSpawnPoint; // –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ç–æ—á–∫–∞ —Å–ø–∞–≤–Ω—É –¥–ª—è –≤—Å—ñ—Ö –≥–µ—Ä–æ—ó–≤
    public bool hasHero = false;              // –ß–∏ —î –≥–µ—Ä–æ–π —É –∑–æ–Ω—ñ
    public GameObject currentHero;            // –ü–æ—Ç–æ—á–Ω–∏–π –≥–µ—Ä–æ–π —É –∑–æ–Ω—ñ

    void Start()
    {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É —Ç–æ—á–∫—É —Å–ø–∞–≤–Ω—É, —è–∫—â–æ –≤–æ–Ω–∞ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        if (globalSpawnPoint == null)
        {
            GameObject spawnObject = GameObject.FindGameObjectWithTag("HeroSpawnPoint");
            if (spawnObject != null)
            {
                globalSpawnPoint = spawnObject.transform;
                Debug.Log("üéØ –ó–Ω–∞–π–¥–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω—É —Ç–æ—á–∫—É —Å–ø–∞–≤–Ω—É: " + spawnObject.name);
            }
            else
            {
                Debug.LogWarning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–±'—î–∫—Ç –∑ —Ç–µ–≥–æ–º 'HeroSpawnPoint'! –°—Ç–≤–æ—Ä—ñ—Ç—å GameObject –∑ —Ü–∏–º —Ç–µ–≥–æ–º –¥–ª—è —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω—É –≥–µ—Ä–æ—ó–≤.");
            }
        }
        
        // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—é —Å–º–µ—Ä—Ç—ñ –≥–µ—Ä–æ—è
        DeathHandler.OnHeroDeath += OnHeroDeath;
    }
    
    void OnDestroy()
    {
        // –í—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –≤—ñ–¥ –ø–æ–¥—ñ—ó –ø—Ä–∏ –∑–Ω–∏—â–µ–Ω–Ω—ñ –∑–æ–Ω–∏
        DeathHandler.OnHeroDeath -= OnHeroDeath;
    }
    
    // –û–±—Ä–æ–±–Ω–∏–∫ —Å–º–µ—Ä—Ç—ñ –≥–µ—Ä–æ—è
    private void OnHeroDeath(Unit deadHero)
    {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–∞—à –≥–µ—Ä–æ–π
        if (currentHero != null && currentHero == deadHero.gameObject)
        {
            Debug.Log($"üíÄ –ì–µ—Ä–æ–π {deadHero.unitName} –ø–æ–º–µ—Ä, –∑–≤—ñ–ª—å–Ω—è—î–º–æ –∑–æ–Ω—É {gameObject.name}");
            RemoveHero();
        }
    }

    // –ú–µ—Ç–æ–¥, —è–∫–∏–π –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ –∑–æ–Ω—ñ
    public void OnPointerClick(PointerEventData eventData)
    {
        HandleZoneClick(); // –†–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∫–ª—ñ–∫—É
    }

    private void HandleZoneClick()
    {
        // –Ø–∫—â–æ –º–∏ –≤ —Ä–µ–∂–∏–º—ñ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ –∑–æ–Ω—É
        if (GameManager.Instance != null && GameManager.Instance.IsPrepareMode())
        {
            Debug.Log("üîí –í —Ä–µ–∂–∏–º—ñ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–æ–Ω–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ñ");
            return;
        }

        TrySpawnHero(); // –ü—Ä–æ–±—É—î–º–æ –∑–∞—Å–ø–∞–≤–Ω–∏—Ç–∏ –≥–µ—Ä–æ—è
    }

    private void TrySpawnHero()
    {
        if (hasHero)
        {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥–µ—Ä–æ–π —â–µ –∂–∏–≤–∏–π
            if (IsHeroAlive())
            {
                Debug.Log("‚ö†Ô∏è –í –∑–æ–Ω—ñ –≤–∂–µ —î –∂–∏–≤–∏–π –≥–µ—Ä–æ–π");
                return;
            }
            else
            {
                // –ì–µ—Ä–æ–π –ø–æ–º–µ—Ä, –∑–≤—ñ–ª—å–Ω—è—î–º–æ –∑–æ–Ω—É
                Debug.Log("üíÄ –ì–µ—Ä–æ–π –≤ –∑–æ–Ω—ñ –ø–æ–º–µ—Ä, –∑–≤—ñ–ª—å–Ω—è—î–º–æ –∑–æ–Ω—É");
                RemoveHero();
            }
        }

        if (globalSpawnPoint == null)
        {
            Debug.LogError("‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞ —Ç–æ—á–∫–∞ —Å–ø–∞–≤–Ω—É! –°—Ç–≤–æ—Ä—ñ—Ç—å GameObject –∑ —Ç–µ–≥–æ–º 'HeroSpawnPoint'");
            return;
        }

        Card selectedCard = FindSelectedCard();
        if (selectedCard == null)
        {
            Debug.Log("‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç—É –≤ —Å–ª–æ—Ç—ñ");
            return;
        }

        GameObject heroPrefab = selectedCard.GetHeroPrefab();
        if (heroPrefab == null)
        {
            Debug.Log("‚ùå –£ –≤–∏–±—Ä–∞–Ω–æ—ó –∫–∞—Ä—Ç–∏ –Ω–µ–º–∞—î –≥–µ—Ä–æ—è –¥–ª—è —Å–ø–∞–≤–Ω—É");
            return;
        }

        Debug.Log($"üü¢ –°–ø–∞–≤–Ω–∏–º–æ –≥–µ—Ä–æ—è –∑ –∫–∞—Ä—Ç–∏: {selectedCard.gameObject.name}");

        SpawnHeroAndMoveToZone(heroPrefab);
        selectedCard.DeselectCard(); // –ü—ñ—Å–ª—è —Å–ø–∞–≤–Ω—É ‚Äî —Å–∫–∏–¥–∞—î–º–æ –≤–∏–±—ñ—Ä
    }

    private Card FindSelectedCard()
    {
        // –®—É–∫–∞—î–º–æ –≤—Å—ñ —Å–ª–æ—Ç–∏ —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤ –Ω–∏—Ö –≤–∏–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞
        Slot[] allSlots = FindObjectsByType<Slot>(FindObjectsSortMode.None);
        foreach (Slot slot in allSlots)
        {
            if (!slot.IsEmpty())
            {
                Card cardComponent = slot.GetCurrentCardComponent();
                if (cardComponent != null && cardComponent.isSelected)
                {
                    Debug.Log($"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≤–∏–±—Ä–∞–Ω—É –∫–∞—Ä—Ç—É: {cardComponent.gameObject.name}");
                    return cardComponent;
                }
            }
        }

        Debug.Log("‚ö†Ô∏è –í–∏–±—Ä–∞–Ω—É –∫–∞—Ä—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        return null;
    }

    private void SpawnHeroAndMoveToZone(GameObject heroPrefab)
    {
        // –°–ø–∞–≤–Ω–∏–º–æ –≥–µ—Ä–æ—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ñ–π —Ç–æ—á—Ü—ñ —Å–ø–∞–≤–Ω—É
        Vector3 spawnPosition = globalSpawnPoint.position;
        Quaternion spawnRotation = globalSpawnPoint.rotation;

        currentHero = Instantiate(heroPrefab, spawnPosition, spawnRotation);
        hasHero = true;

        // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Hero —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ —Ü—ñ–ª—å–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
        Hero heroComponent = currentHero.GetComponent<Hero>();
        if (heroComponent != null)
        {
            // –î–æ–¥–∞—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ZoneMovement –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ä—É—Ö–æ–º –¥–æ –∑–æ–Ω–∏
            ZoneMovement movement = currentHero.AddComponent<ZoneMovement>();
            movement.Initialize(transform.position, this);
        }
        else
        {
            Debug.LogError("‚ùå –£ –ø—Ä–µ—Ñ–∞–±—ñ –≥–µ—Ä–æ—è –Ω–µ–º–∞—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Hero!");
        }

        Debug.Log($"üßç –ì–µ—Ä–æ–π –∑–∞—Å–ø–∞–≤–Ω–µ–Ω–æ –≤ —Ç–æ—á—Ü—ñ —Å–ø–∞–≤–Ω—É —ñ —Ä—É—Ö–∞—î—Ç—å—Å—è –¥–æ –∑–æ–Ω–∏: {gameObject.name}");
    }

    // –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–ª–∏ –≥–µ—Ä–æ–π –¥–æ—Å—è–≥–∞—î –∑–æ–Ω–∏
    public void OnHeroReachedZone(GameObject hero)
    {
        Debug.Log($"‚úÖ –ì–µ—Ä–æ–π {hero.name} –¥–æ—Å—è–≥–Ω—É–≤ –∑–æ–Ω–∏ {gameObject.name}");
        
        // –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å–º–µ—Ä—Ç—ñ –≥–µ—Ä–æ—è
        StartCoroutine(MonitorHeroDeath(hero));
    }
    
    // –í—ñ–¥—Å—Ç–µ–∂—É—î —Å–º–µ—Ä—Ç—å –≥–µ—Ä–æ—è —ñ –∑–≤—ñ–ª—å–Ω—è—î –∑–æ–Ω—É
    private System.Collections.IEnumerator MonitorHeroDeath(GameObject hero)
    {
        while (hero != null && !hero.GetComponent<Unit>().isDead)
        {
            yield return new WaitForSeconds(0.5f); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 0.5 —Å–µ–∫—É–Ω–¥–∏
        }
        
        // –Ø–∫—â–æ –≥–µ—Ä–æ–π –ø–æ–º–µ—Ä –∞–±–æ –±—É–≤ –∑–Ω–∏—â–µ–Ω–∏–π
        if (hero == null || (hero.GetComponent<Unit>() != null && hero.GetComponent<Unit>().isDead))
        {
            Debug.Log($"üíÄ –ì–µ—Ä–æ–π {hero?.name ?? "–Ω–µ–≤—ñ–¥–æ–º–∏–π"} –ø–æ–º–µ—Ä, –∑–≤—ñ–ª—å–Ω—è—î–º–æ –∑–æ–Ω—É {gameObject.name}");
            RemoveHero();
        }
    }

    public void RemoveHero()
    {
        if (currentHero != null)
        {
            // –ó—É–ø–∏–Ω—è—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å–º–µ—Ä—Ç—ñ
            StopAllCoroutines();
            
            // –ó–Ω–∏—â—É—î–º–æ –≥–µ—Ä–æ—è —è–∫—â–æ –≤—ñ–Ω —â–µ —ñ—Å–Ω—É—î
            if (currentHero != null)
            {
                Destroy(currentHero);
            }
        }

        currentHero = null;
        hasHero = false;

        Debug.Log("üóëÔ∏è –ì–µ—Ä–æ—è –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∑–æ–Ω–∏: " + gameObject.name);
    }

    public bool HasHero()
    {
        return hasHero;
    }

    public GameObject GetCurrentHero()
    {
        return currentHero;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≥–µ—Ä–æ–π —â–µ –∂–∏–≤–∏–π
    public bool IsHeroAlive()
    {
        if (currentHero == null) return false;
        
        Unit heroUnit = currentHero.GetComponent<Unit>();
        return heroUnit != null && !heroUnit.isDead;
    }
    
    // –ü—Ä–∏–º—É—Å–æ–≤–æ –∑–≤—ñ–ª—å–Ω—è—î –∑–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –≥–µ—Ä–æ–π –∑–∞—Å—Ç—Ä—è–≥)
    public void ForceFreeZone()
    {
        if (hasHero)
        {
            Debug.Log($"üîÑ –ü—Ä–∏–º—É—Å–æ–≤–æ –∑–≤—ñ–ª—å–Ω—è—î–º–æ –∑–æ–Ω—É {gameObject.name}");
            RemoveHero();
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω—É (–º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∑ —ñ–Ω—à–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤)
    public static void SetGlobalSpawnPoint(Transform spawnPoint)
    {
        globalSpawnPoint = spawnPoint;
        Debug.Log("üéØ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤—É –≥–ª–æ–±–∞–ª—å–Ω—É —Ç–æ—á–∫—É —Å–ø–∞–≤–Ω—É: " + spawnPoint.name);
    }
}