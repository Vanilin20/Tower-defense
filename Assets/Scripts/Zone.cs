using UnityEngine;
using UnityEngine.EventSystems;

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–æ–Ω–∏ (–ø—Ä–∞—Ü—é—î –∑ –Ω–æ–≤–∏–º–∏ –≤–µ—Ä—Å—ñ—è–º–∏ Unity)
[RequireComponent(typeof(Collider2D))] // –ì–∞—Ä–∞–Ω—Ç—É—î, —â–æ –∑–æ–Ω–∞ –º–∞—î 2D –∫–æ–ª–∞–π–¥–µ—Ä
public class Zone : MonoBehaviour, IPointerClickHandler
{
    [Header("–ó–æ–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
    public Transform spawnPoint;         // –¢–æ—á–∫–∞ —Å–ø–∞–≤–Ω—É –≥–µ—Ä–æ—è (—è–∫—â–æ null ‚Äî –±—É–¥–µ –ø–æ–∑–∏—Ü—ñ—è –∑–æ–Ω–∏)
    public bool hasHero = false;         // –ß–∏ —î –≥–µ—Ä–æ–π —É –∑–æ–Ω—ñ
    public GameObject currentHero;       // –ü–æ—Ç–æ—á–Ω–∏–π –≥–µ—Ä–æ–π —É –∑–æ–Ω—ñ

    void Start()
    {
        // –Ø–∫—â–æ spawnPoint –Ω–µ –∑–∞–¥–∞–Ω–∏–π –≤—Ä—É—á–Ω—É ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é —Å–∞–º–æ—ó –∑–æ–Ω–∏
        if (spawnPoint == null)
        {
            spawnPoint = transform;
        }
    }

    // –ú–µ—Ç–æ–¥, —è–∫–∏–π –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ –∑–æ–Ω—ñ
    public void OnPointerClick(PointerEventData eventData)
    {
        HandleZoneClick(); // –†–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∫–ª—ñ–∫—É
    }

    private void HandleZoneClick()
    {
        // –Ø–∫—â–æ –º–∏ –≤ —Ä–µ–∂–∏–º—ñ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ –∑–æ–Ω—É
        if (GameManager.Instance != null && GameManager.Instance.IsPrepareMode())
        {
            Debug.Log("üîí –í —Ä–µ–∂–∏–º—ñ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–æ–Ω–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ñ");
            return;
        }

        TrySpawnHero(); // –ü—Ä–æ–±—É—î–º–æ –∑–∞—Å–ø–∞–≤–Ω–∏—Ç–∏ –≥–µ—Ä–æ—è
    }

    private void TrySpawnHero()
    {
        if (hasHero)
        {
            Debug.Log("‚ö†Ô∏è –í –∑–æ–Ω—ñ –≤–∂–µ —î –≥–µ—Ä–æ–π");
            return;
        }

        Card selectedCard = FindSelectedCard();
        if (selectedCard == null)
        {
            Debug.Log("‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç—É –≤ —Å–ª–æ—Ç—ñ");
            return;
        }

        GameObject heroPrefab = selectedCard.GetHeroPrefab();
        if (heroPrefab == null)
        {
            Debug.Log("‚ùå –£ –≤–∏–±—Ä–∞–Ω–æ—ó –∫–∞—Ä—Ç–∏ –Ω–µ–º–∞—î –≥–µ—Ä–æ—è –¥–ª—è —Å–ø–∞–≤–Ω—É");
            return;
        }

        Debug.Log($"üü¢ –°–ø–∞–≤–Ω–∏–º–æ –≥–µ—Ä–æ—è –∑ –∫–∞—Ä—Ç–∏: {selectedCard.gameObject.name}");

        SpawnHero(heroPrefab);
        selectedCard.DeselectCard(); // –ü—ñ—Å–ª—è —Å–ø–∞–≤–Ω—É ‚Äî —Å–∫–∏–¥–∞—î–º–æ –≤–∏–±—ñ—Ä
    }

    private Card FindSelectedCard()
    {
        // –®—É–∫–∞—î–º–æ –≤—Å—ñ —Å–ª–æ—Ç–∏ —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤ –Ω–∏—Ö –≤–∏–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞
        Slot[] allSlots = FindObjectsByType<Slot>(FindObjectsSortMode.None);
        foreach (Slot slot in allSlots)
        {
            if (!slot.IsEmpty())
            {
                Card cardComponent = slot.GetCurrentCardComponent();
                if (cardComponent != null && cardComponent.isSelected)
                {
                    Debug.Log($"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≤–∏–±—Ä–∞–Ω—É –∫–∞—Ä—Ç—É: {cardComponent.gameObject.name}");
                    return cardComponent;
                }
            }
        }

        Debug.Log("‚ö†Ô∏è –í–∏–±—Ä–∞–Ω—É –∫–∞—Ä—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        return null;
    }

    private void SpawnHero(GameObject heroPrefab)
    {
        Vector3 spawnPosition = spawnPoint.position;
        Quaternion spawnRotation = spawnPoint.rotation;

        currentHero = Instantiate(heroPrefab, spawnPosition, spawnRotation);
        hasHero = true;

        Debug.Log("üßç –ì–µ—Ä–æ–π –∑–∞—Å–ø–∞–≤–Ω–µ–Ω–æ –≤ –∑–æ–Ω—ñ: " + gameObject.name);
    }

    public void RemoveHero()
    {
        if (currentHero != null)
        {
            Destroy(currentHero);
        }

        currentHero = null;
        hasHero = false;

        Debug.Log("üóëÔ∏è –ì–µ—Ä–æ—è –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∑–æ–Ω–∏: " + gameObject.name);
    }

    public bool HasHero()
    {
        return hasHero;
    }

    public GameObject GetCurrentHero()
    {
        return currentHero;
    }
}
