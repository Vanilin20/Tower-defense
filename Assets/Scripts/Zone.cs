using UnityEngine;
using UnityEngine.EventSystems;

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–æ–Ω–∏ (–ø—Ä–∞—Ü—é—î –∑ –Ω–æ–≤–∏–º–∏ –≤–µ—Ä—Å—ñ—è–º–∏ Unity)
[RequireComponent(typeof(Collider2D))] // –ì–∞—Ä–∞–Ω—Ç—É—î, —â–æ –∑–æ–Ω–∞ –º–∞—î 2D –∫–æ–ª–∞–π–¥–µ—Ä
public class Zone : MonoBehaviour, IPointerClickHandler
{
    [Header("–ó–æ–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]
    public static Transform globalSpawnPoint; // –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ç–æ—á–∫–∞ —Å–ø–∞–≤–Ω—É –¥–ª—è –≤—Å—ñ—Ö –≥–µ—Ä–æ—ó–≤
    public bool hasHero = false;              // –ß–∏ —î –≥–µ—Ä–æ–π —É –∑–æ–Ω—ñ
    public GameObject currentHero;            // –ü–æ—Ç–æ—á–Ω–∏–π –≥–µ—Ä–æ–π —É –∑–æ–Ω—ñ
    
    // –ù–û–í–ï: –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
    [Header("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è")]
    public float heroStayDuration = 30f;     // –°–∫—ñ–ª—å–∫–∏ —Å–µ–∫—É–Ω–¥ –≥–µ—Ä–æ–π –º–æ–∂–µ –±—É—Ç–∏ –≤ –∑–æ–Ω—ñ
    public bool enableAutoReturn = true;     // –£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
    private float heroEnterTime = 0f;        // –ß–∞—Å –≤—Ö–æ–¥—É –≥–µ—Ä–æ—è –≤ –∑–æ–Ω—É
    private bool isHeroReturning = false;    // –ß–∏ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –≥–µ—Ä–æ–π –¥–æ —Å–ø–∞–≤–Ω—É

    void Start()
    {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É —Ç–æ—á–∫—É —Å–ø–∞–≤–Ω—É, —è–∫—â–æ –≤–æ–Ω–∞ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        if (globalSpawnPoint == null)
        {
            GameObject spawnObject = GameObject.FindGameObjectWithTag("HeroSpawnPoint");
            if (spawnObject != null)
            {
                globalSpawnPoint = spawnObject.transform;
                Debug.Log("üéØ –ó–Ω–∞–π–¥–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω—É —Ç–æ—á–∫—É —Å–ø–∞–≤–Ω—É: " + spawnObject.name);
            }
            else
            {
                Debug.LogWarning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–±'—î–∫—Ç –∑ —Ç–µ–≥–æ–º 'HeroSpawnPoint'! –°—Ç–≤–æ—Ä—ñ—Ç—å GameObject –∑ —Ü–∏–º —Ç–µ–≥–æ–º –¥–ª—è —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω—É –≥–µ—Ä–æ—ó–≤.");
            }
        }
        
        // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –ø–æ–¥—ñ—é —Å–º–µ—Ä—Ç—ñ –≥–µ—Ä–æ—è
        DeathHandler.OnHeroDeath += OnHeroDeath;
    }
    
    void Update()
    {
        // –ù–û–í–ï: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è –≥–µ—Ä–æ—è –≤ –∑–æ–Ω—ñ
        CheckHeroStayTime();
    }
    
    // –ù–û–í–ò–ô –ú–ï–¢–û–î: –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∞—Å –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è –≥–µ—Ä–æ—è –≤ –∑–æ–Ω—ñ
    private void CheckHeroStayTime()
    {
        if (!enableAutoReturn || !hasHero || currentHero == null || isHeroReturning) return;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø–æ–º–µ—Ä –≥–µ—Ä–æ–π
        if (!IsHeroAlive()) return;
        
        float timeInZone = Time.time - heroEnterTime;
        
        if (timeInZone >= heroStayDuration)
        {
            Debug.Log($"‚è∞ –ì–µ—Ä–æ–π {currentHero.name} –ø–µ—Ä–µ–±—É–≤–∞–≤ –≤ –∑–æ–Ω—ñ {gameObject.name} {timeInZone:F1} —Å–µ–∫ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ —Å–ø–∞–≤–Ω—É");
            AutoReturnHeroToSpawn();
        }
    }
    
    // –ù–û–í–ò–ô –ú–ï–¢–û–î: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≥–µ—Ä–æ—è –¥–æ —Å–ø–∞–≤–Ω—É
    private void AutoReturnHeroToSpawn()
    {
        if (isHeroReturning) return;
        
        isHeroReturning = true;
        
        // –û—Ç—Ä–∏–º—É—î–º–æ HeroController
        HeroController heroController = currentHero.GetComponent<HeroController>();
        if (heroController != null)
        {
            // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –∑–æ–Ω—É
            heroController.BlockReturnToZone();
            
            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∞–≤–Ω—É
            heroController.AutoReturnToSpawn();
        }
        
        // –ó–≤—ñ–ª—å–Ω—è—î–º–æ –∑–æ–Ω—É
        FreeZoneKeepHero();
        
        Debug.Log($"üîÑ –ó–æ–Ω–∞ {gameObject.name} –∑–≤—ñ–ª—å–Ω–µ–Ω–∞ - –≥–µ—Ä–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ —Å–ø–∞–≤–Ω—É");
    }
    
    void OnDestroy()
    {
        // –í—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –≤—ñ–¥ –ø–æ–¥—ñ—ó –ø—Ä–∏ –∑–Ω–∏—â–µ–Ω–Ω—ñ –∑–æ–Ω–∏
        DeathHandler.OnHeroDeath -= OnHeroDeath;
    }
    
    // –û–±—Ä–æ–±–Ω–∏–∫ —Å–º–µ—Ä—Ç—ñ –≥–µ—Ä–æ—è
    private void OnHeroDeath(Unit deadHero)
    {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–∞—à –≥–µ—Ä–æ–π
        if (currentHero != null && currentHero == deadHero.gameObject)
        {
            Debug.Log($"üíÄ –ì–µ—Ä–æ–π {deadHero.unitName} –ø–æ–º–µ—Ä, –∑–≤—ñ–ª—å–Ω—è—î–º–æ –∑–æ–Ω—É {gameObject.name}");
            RemoveHero();
        }
    }

    // –ú–µ—Ç–æ–¥, —è–∫–∏–π –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ –∑–æ–Ω—ñ
    public void OnPointerClick(PointerEventData eventData)
    {
        HandleZoneClick(); // –†–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∫–ª—ñ–∫—É
    }

    private void HandleZoneClick()
    {
        // –Ø–∫—â–æ –º–∏ –≤ —Ä–µ–∂–∏–º—ñ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ –∑–æ–Ω—É
        if (GameManager.Instance != null && GameManager.Instance.IsPrepareMode())
        {
            Debug.Log("üîí –í —Ä–µ–∂–∏–º—ñ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–æ–Ω–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ñ");
            return;
        }

        TrySpawnHero(); // –ü—Ä–æ–±—É—î–º–æ –∑–∞—Å–ø–∞–≤–Ω–∏—Ç–∏ –≥–µ—Ä–æ—è
    }

    private void TrySpawnHero()
    {
        if (hasHero)
        {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥–µ—Ä–æ–π —â–µ –∂–∏–≤–∏–π
            if (IsHeroAlive())
            {
                Debug.Log("‚ö†Ô∏è –í –∑–æ–Ω—ñ –≤–∂–µ —î –∂–∏–≤–∏–π –≥–µ—Ä–æ–π");
                return;
            }
            else
            {
                // –ì–µ—Ä–æ–π –ø–æ–º–µ—Ä, –∑–≤—ñ–ª—å–Ω—è—î–º–æ –∑–æ–Ω—É
                Debug.Log("üíÄ –ì–µ—Ä–æ–π –≤ –∑–æ–Ω—ñ –ø–æ–º–µ—Ä, –∑–≤—ñ–ª—å–Ω—è—î–º–æ –∑–æ–Ω—É");
                RemoveHero();
            }
        }

        if (globalSpawnPoint == null)
        {
            Debug.LogError("‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞ —Ç–æ—á–∫–∞ —Å–ø–∞–≤–Ω—É! –°—Ç–≤–æ—Ä—ñ—Ç—å GameObject –∑ —Ç–µ–≥–æ–º 'HeroSpawnPoint'");
            return;
        }

        Card selectedCard = FindSelectedCard();
        if (selectedCard == null)
        {
            Debug.Log("‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç—É –≤ —Å–ª–æ—Ç—ñ");
            return;
        }

        // –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –≥–µ—Ä–æ—è –º—ñ–∂ –∑–æ–Ω–∞–º–∏
        if (selectedCard.IsInUse())
        {
            GameObject linkedHero = selectedCard.GetLinkedHero();
            if (linkedHero != null)
            {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥–µ—Ä–æ–π –≤–∂–µ –≤ —è–∫—ñ–π—Å—å –∑–æ–Ω—ñ
                Zone currentHeroZone = GetHeroCurrentZone(linkedHero);
                if (currentHeroZone != null)
                {
                    // –ì–µ—Ä–æ–π –≤–∂–µ –≤ –∑–æ–Ω—ñ - –ø–µ—Ä–µ–º—ñ—â—É—î–º–æ –π–æ–≥–æ –¥–æ —Ü—ñ—î—ó –Ω–æ–≤–æ—ó –∑–æ–Ω–∏
                    MoveHeroBetweenZones(linkedHero, currentHeroZone, this);
                    selectedCard.DeselectCard();
                    return;
                }
                else
                {
                    // –ì–µ—Ä–æ–π –Ω–µ –≤ –∑–æ–Ω—ñ (–º–æ–∂–ª–∏–≤–æ –≤ —Å–ø–∞–≤–Ω—ñ) - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–º—ñ—â—É—î–º–æ –¥–æ —Ü—ñ—î—ó –∑–æ–Ω–∏
                    MoveHeroToZone(linkedHero, this);
                    selectedCard.DeselectCard();
                    return;
                }
            }
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥—Ü—ñ
        if (selectedCard.IsOnCooldown())
        {
            float remainingTime = selectedCard.GetCooldownRemaining();
            Debug.Log($"‚è≥ –ö–∞—Ä—Ç—É {selectedCard.gameObject.name} —â–µ –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥—Ü—ñ. –ó–∞–ª–∏—à–∏–ª–æ—Å—è: {remainingTime:F1} —Å–µ–∫");
            return;
        }

        GameObject heroPrefab = selectedCard.GetHeroPrefab();
        if (heroPrefab == null)
        {
            Debug.Log("‚ùå –£ –≤–∏–±—Ä–∞–Ω–æ—ó –∫–∞—Ä—Ç–∏ –Ω–µ–º–∞—î –≥–µ—Ä–æ—è –¥–ª—è —Å–ø–∞–≤–Ω—É");
            return;
        }

        Debug.Log($"üü¢ –°–ø–∞–≤–Ω–∏–º–æ –≥–µ—Ä–æ—è –∑ –∫–∞—Ä—Ç–∏: {selectedCard.gameObject.name}");

        SpawnHeroAndMoveToZone(heroPrefab, selectedCard);
        selectedCard.DeselectCard(); // –ü—ñ—Å–ª—è —Å–ø–∞–≤–Ω—É ‚Äî —Å–∫–∏–¥–∞—î–º–æ –≤–∏–±—ñ—Ä
    }

    private Card FindSelectedCard()
    {
        // –®—É–∫–∞—î–º–æ –≤—Å—ñ —Å–ª–æ—Ç–∏ —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤ –Ω–∏—Ö –≤–∏–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞
        Slot[] allSlots = FindObjectsByType<Slot>(FindObjectsSortMode.None);
        foreach (Slot slot in allSlots)
        {
            if (!slot.IsEmpty())
            {
                Card cardComponent = slot.GetCurrentCardComponent();
                if (cardComponent != null && cardComponent.isSelected)
                {
                    Debug.Log($"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≤–∏–±—Ä–∞–Ω—É –∫–∞—Ä—Ç—É: {cardComponent.gameObject.name}");
                    return cardComponent;
                }
            }
        }

        Debug.Log("‚ö†Ô∏è –í–∏–±—Ä–∞–Ω—É –∫–∞—Ä—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        return null;
    }

    private void SpawnHeroAndMoveToZone(GameObject heroPrefab, Card sourceCard)
    {
        // –°–ø–∞–≤–Ω–∏–º–æ –≥–µ—Ä–æ—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ñ–π —Ç–æ—á—Ü—ñ —Å–ø–∞–≤–Ω—É
        Vector3 spawnPosition = globalSpawnPoint.position;
        Quaternion spawnRotation = globalSpawnPoint.rotation;

        currentHero = Instantiate(heroPrefab, spawnPosition, spawnRotation);
        hasHero = true;

        // –õ–æ—á–∏–º–æ –∫–∞—Ä—Ç—É –Ω–∞ —Ü—å–æ–≥–æ –≥–µ—Ä–æ—è, —â–æ–± –Ω–µ —Å–ø–∞–≤–Ω–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏
        if (sourceCard != null)
        {
            sourceCard.LockForHero(currentHero);
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Hero —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ —Ü—ñ–ª—å–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
        Hero heroComponent = currentHero.GetComponent<Hero>();
        if (heroComponent != null)
        {
            // –î–æ–¥–∞—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ZoneMovement –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ä—É—Ö–æ–º –¥–æ –∑–æ–Ω–∏
            ZoneMovement movement = currentHero.AddComponent<ZoneMovement>();
            movement.Initialize(transform.position, this);
            
            // –î–æ–¥–∞—î–º–æ HeroController –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–Ω–æ–ø–∫–∞–º–∏
            HeroController heroController = currentHero.GetComponent<HeroController>();
            if (heroController == null)
            {
                heroController = currentHero.AddComponent<HeroController>();
            }
            
            // –ü—Ä–∏–≤'—è–∑—É—î–º–æ –≥–µ—Ä–æ—è –¥–æ –∑–æ–Ω–∏
            heroController.SetCurrentZone(this);

            // –ù–û–í–ï: –ù–ï –∞–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ - —á–µ–∫–∞—î–º–æ –∫–ª—ñ–∫—É –≥—Ä–∞–≤—Ü—è
            // GameManager.SelectHero(currentHero); // –ó–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ
        }
        else
        {
            Debug.LogError("‚ùå –£ –ø—Ä–µ—Ñ–∞–±—ñ –≥–µ—Ä–æ—è –Ω–µ–º–∞—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Hero!");
        }
    }

    // –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–ª–∏ –≥–µ—Ä–æ–π –¥–æ—Å—è–≥–∞—î –∑–æ–Ω–∏
    public void OnHeroReachedZone(GameObject hero)
    {
        AssignHero(hero);
    }
    
    // –ü—Ä–∏–∑–Ω–∞—á–∞—î –≥–µ—Ä–æ—è —Ü—ñ–π –∑–æ–Ω—ñ –±–µ–∑ —Å–ø–∞–≤–Ω—É
    public void AssignHero(GameObject hero)
    {
        currentHero = hero;
        hasHero = true;
        heroEnterTime = Time.time; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –≤—Ö–æ–¥—É –≥–µ—Ä–æ—è –≤ –∑–æ–Ω—É
        Debug.Log($"‚úÖ –ì–µ—Ä–æ–π {hero.name} –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–æ –∑–æ–Ω–∏ {gameObject.name}");
        StartCoroutine(MonitorHeroDeath(hero));
    }
    
    // –ó–≤—ñ–ª—å–Ω—è—î –∑–æ–Ω—É, –∞–ª–µ –ù–ï –∑–Ω–∏—â—É—î –≥–µ—Ä–æ—è —ñ –Ω–µ –æ—á–∏—â–∞—î –π–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä
    public void FreeZoneKeepHero()
    {
        if (currentHero != null)
        {
            StopAllCoroutines();
        }
        currentHero = null;
        hasHero = false;
        heroEnterTime = 0f; // –°–∫–∏–¥–∞—î–º–æ —á–∞—Å –≤—Ö–æ–¥—É
        isHeroReturning = false; // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        Debug.Log($"üö´ –ó–æ–Ω–∞ {gameObject.name} –∑–≤—ñ–ª—å–Ω–µ–Ω–∞ –±–µ–∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≥–µ—Ä–æ—è");
    }
    
    // –í—ñ–¥—Å—Ç–µ–∂—É—î —Å–º–µ—Ä—Ç—å –≥–µ—Ä–æ—è —ñ –∑–≤—ñ–ª—å–Ω—è—î –∑–æ–Ω—É
    private System.Collections.IEnumerator MonitorHeroDeath(GameObject hero)
    {
        while (hero != null && !hero.GetComponent<Unit>().isDead)
        {
            yield return new WaitForSeconds(0.5f); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 0.5 —Å–µ–∫—É–Ω–¥–∏
        }
        
        // –Ø–∫—â–æ –≥–µ—Ä–æ–π –ø–æ–º–µ—Ä –∞–±–æ –±—É–≤ –∑–Ω–∏—â–µ–Ω–∏–π
        if (hero == null || (hero.GetComponent<Unit>() != null && hero.GetComponent<Unit>().isDead))
        {
            Debug.Log($"üíÄ –ì–µ—Ä–æ–π {hero?.name ?? "–Ω–µ–≤—ñ–¥–æ–º–∏–π"} –ø–æ–º–µ—Ä, –∑–≤—ñ–ª—å–Ω—è—î–º–æ –∑–æ–Ω—É {gameObject.name}");
            RemoveHero();
        }
    }

    public void RemoveHero()
    {
        if (currentHero != null)
        {
            // –ó—É–ø–∏–Ω—è—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å–º–µ—Ä—Ç—ñ
            StopAllCoroutines();
            
            // –°–ø–æ–≤—ñ—â–∞—î–º–æ HeroController –ø—Ä–æ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∑ –∑–æ–Ω–∏
            HeroController heroController = currentHero.GetComponent<HeroController>();
            if (heroController != null)
            {
                heroController.ClearCurrentZone();
            }
            
            // –ù–µ –≤–∏–¥–∞–ª—è—î–º–æ –≥–µ—Ä–æ—è ‚Äî —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–≤'—è–∑—É—î–º–æ –∑–æ–Ω—É
            // (–≥–µ—Ä–æ–π –º–æ–∂–µ –±—É—Ç–∏ –≤ —Å–ø–∞–≤–Ω—ñ —ñ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥)
            // currentHero –ù–ï –∑–Ω–∏—â—É—î–º–æ
        }

        currentHero = null;
        hasHero = false;
        heroEnterTime = 0f; // –°–∫–∏–¥–∞—î–º–æ —á–∞—Å –≤—Ö–æ–¥—É
        isHeroReturning = false; // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è

        Debug.Log("üóëÔ∏è –ì–µ—Ä–æ—è –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∑–æ–Ω–∏: " + gameObject.name);
    }

    public bool HasHero()
    {
        return hasHero;
    }

    public GameObject GetCurrentHero()
    {
        return currentHero;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≥–µ—Ä–æ–π —â–µ –∂–∏–≤–∏–π
    public bool IsHeroAlive()
    {
        if (currentHero == null) return false;
        
        Unit heroUnit = currentHero.GetComponent<Unit>();
        return heroUnit != null && !heroUnit.isDead;
    }
    
    // –ü—Ä–∏–º—É—Å–æ–≤–æ –∑–≤—ñ–ª—å–Ω—è—î –∑–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –≥–µ—Ä–æ–π –∑–∞—Å—Ç—Ä—è–≥)
    public void ForceFreeZone()
    {
        if (hasHero)
        {
            Debug.Log($"üîÑ –ü—Ä–∏–º—É—Å–æ–≤–æ –∑–≤—ñ–ª—å–Ω—è—î–º–æ –∑–æ–Ω—É {gameObject.name}");
            RemoveHero();
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω—É (–º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∑ —ñ–Ω—à–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤)
    public static void SetGlobalSpawnPoint(Transform spawnPoint)
    {
        globalSpawnPoint = spawnPoint;
        Debug.Log("üéØ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤—É –≥–ª–æ–±–∞–ª—å–Ω—É —Ç–æ—á–∫—É —Å–ø–∞–≤–Ω—É: " + spawnPoint.name);
    }
    
    // –ù–û–í–Ü –ü–£–ë–õ–Ü–ß–ù–Ü –ú–ï–¢–û–î–ò –î–õ–Ø –¢–ê–ô–ú–ï–†–ê
    
    /// <summary>
    /// –û—Ç—Ä–∏–º—É—î —á–∞—Å –≤—Ö–æ–¥—É –≥–µ—Ä–æ—è –≤ –∑–æ–Ω—É
    /// </summary>
    public float GetHeroEnterTime()
    {
        return heroEnterTime;
    }
    
    /// <summary>
    /// –û—Ç—Ä–∏–º—É—î —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è –≥–µ—Ä–æ—è –≤ –∑–æ–Ω—ñ
    /// </summary>
    public float GetHeroStayDuration()
    {
        return heroStayDuration;
    }
    
    /// <summary>
    /// –û—Ç—Ä–∏–º—É—î –∑–∞–ª–∏—à–æ–∫ —á–∞—Å—É –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è –≥–µ—Ä–æ—è –≤ –∑–æ–Ω—ñ
    /// </summary>
    public float GetRemainingTime()
    {
        if (!hasHero || currentHero == null) return 0f;
        
        float timeInZone = Time.time - heroEnterTime;
        return Mathf.Max(0f, heroStayDuration - timeInZone);
    }
    
    /// <summary>
    /// –û—Ç—Ä–∏–º—É—î –≤—ñ–¥—Å–æ—Ç–æ–∫ –∑–∞–ª–∏—à–µ–Ω–æ–≥–æ —á–∞—Å—É
    /// </summary>
    public float GetTimePercentage()
    {
        if (!hasHero || currentHero == null) return 0f;
        
        float remainingTime = GetRemainingTime();
        return remainingTime / heroStayDuration;
    }
    
    /// <summary>
    /// –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—è –º–∞–ª–æ —á–∞—Å—É (–¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è)
    /// </summary>
    public bool IsTimeRunningOut()
    {
        return GetTimePercentage() <= 0.3f; // 30% —á–∞—Å—É –∑–∞–ª–∏—à–∏–ª–æ—Å—è
    }
    
    /// <summary>
    /// –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ –º–∞–ª–æ —á–∞—Å—É
    /// </summary>
    public bool IsTimeCritical()
    {
        return GetTimePercentage() <= 0.1f; // 10% —á–∞—Å—É –∑–∞–ª–∏—à–∏–ª–æ—Å—è
    }

    // –ù–û–í–ò–ô –ú–ï–¢–û–î: –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ—Ç–æ—á–Ω—É –∑–æ–Ω—É –≥–µ—Ä–æ—è
    private Zone GetHeroCurrentZone(GameObject hero)
    {
        Zone[] allZones = FindObjectsByType<Zone>(FindObjectsSortMode.None);
        foreach (Zone zone in allZones)
        {
            if (zone.HasHero() && zone.GetCurrentHero() == hero)
            {
                return zone;
            }
        }
        return null;
    }

    // –ù–û–í–ò–ô –ú–ï–¢–û–î: –ü–µ—Ä–µ–º—ñ—â—É—î –≥–µ—Ä–æ—è –º—ñ–∂ –∑–æ–Ω–∞–º–∏
    private void MoveHeroBetweenZones(GameObject hero, Zone fromZone, Zone toZone)
    {
        if (fromZone == toZone)
        {
            Debug.Log("‚ö†Ô∏è –ì–µ—Ä–æ–π –≤–∂–µ –≤ —Ü—ñ–π –∑–æ–Ω—ñ");
            return;
        }

        Debug.Log($"üîÑ –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –≥–µ—Ä–æ—è {hero.name} –∑ –∑–æ–Ω–∏ {fromZone.name} –¥–æ –∑–æ–Ω–∏ {toZone.name}");

        // –ó–≤—ñ–ª—å–Ω—è—î–º–æ —Å—Ç–∞—Ä—É –∑–æ–Ω—É
        fromZone.FreeZoneKeepHero();

        // –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –≥–µ—Ä–æ—è –¥–æ –Ω–æ–≤–æ—ó –∑–æ–Ω–∏
        toZone.AssignHero(hero);

        // –û–Ω–æ–≤–ª—é—î–º–æ HeroController
        HeroController heroController = hero.GetComponent<HeroController>();
        if (heroController != null)
        {
            heroController.SetCurrentZone(toZone);
        }

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ä—É—Ö –¥–æ –Ω–æ–≤–æ—ó –∑–æ–Ω–∏
        ZoneMovement movement = hero.GetComponent<ZoneMovement>();
        if (movement == null)
        {
            movement = hero.AddComponent<ZoneMovement>();
        }
        movement.Initialize(toZone.transform.position, toZone);

        // –í–∏–±–∏—Ä–∞—î–º–æ –≥–µ—Ä–æ—è –¥–ª—è UI
        GameManager.SelectHero(hero);

        Debug.Log($"‚úÖ –ì–µ—Ä–æ–π {hero.name} —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∏–π –∑ –∑–æ–Ω–∏ {fromZone.name} –¥–æ –∑–æ–Ω–∏ {toZone.name}");
    }

    // –ù–û–í–ò–ô –ú–ï–¢–û–î: –ü–µ—Ä–µ–º—ñ—â—É—î –≥–µ—Ä–æ—è –¥–æ –∑–æ–Ω–∏ (—è–∫—â–æ –≤—ñ–Ω –Ω–µ –≤ –∑–æ–Ω—ñ)
    private void MoveHeroToZone(GameObject hero, Zone targetZone)
    {
        Debug.Log($"üéØ –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –≥–µ—Ä–æ—è {hero.name} –¥–æ –∑–æ–Ω–∏ {targetZone.name}");

        // –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –≥–µ—Ä–æ—è –¥–æ —Ü—ñ—î—ó –∑–æ–Ω–∏
        targetZone.AssignHero(hero);

        // –û–Ω–æ–≤–ª—é—î–º–æ HeroController
        HeroController heroController = hero.GetComponent<HeroController>();
        if (heroController != null)
        {
            heroController.SetCurrentZone(targetZone);
        }

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ä—É—Ö –¥–æ –∑–æ–Ω–∏
        ZoneMovement movement = hero.GetComponent<ZoneMovement>();
        if (movement == null)
        {
            movement = hero.AddComponent<ZoneMovement>();
        }
        movement.Initialize(targetZone.transform.position, targetZone);

        // –í–∏–±–∏—Ä–∞—î–º–æ –≥–µ—Ä–æ—è –¥–ª—è UI
        GameManager.SelectHero(hero);

        Debug.Log($"‚úÖ –ì–µ—Ä–æ–π {hero.name} —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∏–π –¥–æ –∑–æ–Ω–∏ {targetZone.name}");
    }
}