using System.Collections;
using UnityEngine;
using UnityEngine.InputSystem;

public class GoldPickup : MonoBehaviour
{
    private int goldAmount = 1;
    private bool canPickup = true;
    
    private SpriteRenderer spriteRenderer;
    private Collider2D goldCollider;
    
    public float pickupCooldown = 0.1f;
    public float lifetime = 30f;
    
    void Start()
    {
        spriteRenderer = GetComponent<SpriteRenderer>();
        goldCollider = GetComponent<Collider2D>();
        
        if (spriteRenderer == null) Debug.LogError("SpriteRenderer –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
        if (goldCollider == null) Debug.LogError("Collider2D –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
        
        // üïê –ê–≤—Ç–æ-–∑–Ω–∏—â–µ–Ω–Ω—è (–ø—Ä–∞—Ü—é—î –Ω–∞–≤—ñ—Ç—å –Ω–∞ –ø–∞—É–∑—ñ)
        StartCoroutine(DestroyAfterRealTime());
    }
    
    void Update()
    {
        // üéØ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª—ñ–∫ –Ω–∞–≤—ñ—Ç—å –∫–æ–ª–∏ –≥—Ä–∞ –Ω–∞ –ø–∞—É–∑—ñ (–Ω–æ–≤–∏–π Input System)
        if (Mouse.current.leftButton.wasPressedThisFrame && canPickup)
        {
            CheckMouseClick();
        }
    }
    
    void CheckMouseClick()
    {
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –º–∏—à—ñ —á–µ—Ä–µ–∑ –Ω–æ–≤–∏–π Input System
        Vector2 mousePos = Mouse.current.position.ReadValue();
        Vector2 worldPos = Camera.main.ScreenToWorldPoint(mousePos);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ—Ä–µ–∑ bounds
        if (goldCollider != null && goldCollider.bounds.Contains(worldPos))
        {
            Debug.Log("–ö–ª—ñ–∫ –ø–æ –∑–æ–ª–æ—Ç—É!");
            PickupGold();
            return; // –í–∏—Ö–æ–¥–∏–º–æ, —â–æ–± –Ω–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –¥–≤—ñ—á—ñ
        }
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Raycast
        RaycastHit2D hit = Physics2D.Raycast(worldPos, Vector2.zero, 0f);
        if (hit.collider != null && hit.collider.gameObject == gameObject)
        {
            Debug.Log("Raycast –ø–æ–ø–∞–≤ –≤ –∑–æ–ª–æ—Ç–æ!");
            PickupGold();
        }
    }
    
    public void SetGoldAmount(int amount)
    {
        goldAmount = amount;
    }
    
    void PickupGold()
    {
        Debug.Log("PickupGold –≤–∏–∫–ª–∏–∫–∞–Ω–æ!");
        
        if (!canPickup) return;
        canPickup = false;
        
        // üíé –î–æ–¥–∞—î–º–æ –∑–æ–ª–æ—Ç–æ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
        if (GoldManager.Instance != null)
        {
            GoldManager.Instance.AddGold(goldAmount);
            Debug.Log($"–î–æ–¥–∞–Ω–æ {goldAmount} –∑–æ–ª–æ—Ç–∞!");
        }
        else
        {
            Debug.LogError("GoldManager.Instance –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
        }
        
        // üé® –ï—Ñ–µ–∫—Ç –ø—ñ–¥–±–æ—Ä—É (–ø—Ä–∞—Ü—é—î –Ω–∞–≤—ñ—Ç—å –Ω–∞ –ø–∞—É–∑—ñ)
        StartCoroutine(PickupEffectRealTime());
    }
    
    // ‚ú® –ï—Ñ–µ–∫—Ç –ø—ñ–¥–±–æ—Ä—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ real time
    IEnumerator PickupEffectRealTime()
    {
        if (goldCollider != null)
            goldCollider.enabled = false;
            
        float duration = 0.3f;
        float timer = 0f;
        Vector3 startScale = transform.localScale;
        Vector3 targetScale = startScale * 1.2f;
        Color startColor = spriteRenderer.color;
        
        while (timer < duration)
        {
            timer += Time.unscaledDeltaTime; // üëà unscaledDeltaTime!
            float progress = timer / duration;
            
            transform.localScale = Vector3.Lerp(startScale, targetScale, progress);
            
            Color currentColor = startColor;
            currentColor.a = Mathf.Lerp(1f, 0f, progress);
            spriteRenderer.color = currentColor;
            
            transform.Translate(Vector2.up * 2f * Time.unscaledDeltaTime); // üëà unscaledDeltaTime!
            
            yield return null;
        }
        
        Destroy(gameObject);
    }
    
    // ‚è∞ –ê–≤—Ç–æ-–∑–Ω–∏—â–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ real time
    IEnumerator DestroyAfterRealTime()
    {
        float timer = 0f;
        
        while (timer < lifetime)
        {
            timer += Time.unscaledDeltaTime; // üëà unscaledDeltaTime!
            yield return null;
        }
        
        if (gameObject != null)
        {
            StartCoroutine(FadeOutRealTime());
        }
    }
    
    // üåü –ó–Ω–∏–∫–Ω–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ real time
    IEnumerator FadeOutRealTime()
    {
        float fadeSpeed = 2f;
        
        while (spriteRenderer.color.a > 0f)
        {
            Color currentColor = spriteRenderer.color;
            currentColor.a -= fadeSpeed * Time.unscaledDeltaTime; // üëà unscaledDeltaTime!
            spriteRenderer.color = currentColor;
            
            yield return null;
        }
        
        Destroy(gameObject);
    }
    
    // ‚ùå OnMouseDown –ù–ï –ü–†–ê–¶–Æ–Ñ –∫–æ–ª–∏ Time.timeScale = 0!
    void OnMouseDown()
    {
        Debug.Log("OnMouseDown (–º–æ–∂–µ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–∞ –ø–∞—É–∑—ñ)");
        if (canPickup)
        {
            PickupGold();
        }
    }
}