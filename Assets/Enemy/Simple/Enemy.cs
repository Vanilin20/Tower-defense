using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Enemy : MonoBehaviour
{
    public UnitStats stats;
    private GameObject target;
    private float attackTimer;
    public int gold = 1;
    private int currentHealth;

    private List<GameObject> inZoneUnits = new List<GameObject>();
    private Animator animator;
    private bool isDead = false;
    
    // üé® –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –¥–ª—è –µ—Ñ–µ–∫—Ç—É –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è
    private SpriteRenderer spriteRenderer;
    private Collider2D enemyCollider;
    
    // üí∞ –ü—Ä–µ—Ñ–∞–± –∑–æ–ª–æ—Ç–∞ –¥–ª—è —Å–ø–∞–≤–Ω—É
    public GameObject goldPrefab;

    void Start()
    {
        currentHealth = stats.maxHealth;
        animator = GetComponent<Animator>();
        spriteRenderer = GetComponent<SpriteRenderer>();
        enemyCollider = GetComponent<Collider2D>();
    }

    void Update()
    {
        if (isDead) return;

        // üîÑ –û—á–∏—â–µ–Ω–Ω—è —ñ –≤–∏–±—ñ—Ä –Ω–æ–≤–æ—ó —Ü—ñ–ª—ñ
        if (target == null)
        {
            RemoveNullsFromZone();
            if (inZoneUnits.Count > 0)
            {
                target = inZoneUnits[0];
            }
        }

        if (target != null)
        {
            float distance = Vector2.Distance(transform.position, target.transform.position);
            if (distance > stats.attackRange)
            {
                animator.SetBool("isRunning", true);
                animator.SetBool("isAttacking", false);

                // üéØ –†—É—Ö –¥–æ —Ü—ñ–ª—ñ –∑ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è–º –ø–æ Y-–æ—Å—ñ
                MoveTowardsTarget();
            }
            else
            {
                animator.SetBool("isRunning", false);
                animator.SetBool("isAttacking", true);

                attackTimer -= Time.deltaTime;
                if (attackTimer <= 0f)
                {
                    Attack();
                    attackTimer = stats.attackCooldown;
                }
            }
        }
        else
        {
            // üîÑ –ë—ñ–≥ –≤–ª—ñ–≤–æ, —è–∫—â–æ –Ω–µ–º–∞ —Ü—ñ–ª—ñ
            animator.SetBool("isRunning", true);
            animator.SetBool("isAttacking", false);

            transform.Translate(Vector2.left * stats.moveSpeed * Time.deltaTime);
        }
    }

    void MoveTowardsTarget()
    {
        if (target == null) return;

        Vector3 targetPos = target.transform.position;
        Vector3 currentPos = transform.position;
        
        // üìê –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –ø–æ Y-–æ—Å—ñ - —Ä—É—Ö–∞—î–º–æ—Å—è –¥–æ –æ–¥–Ω—ñ—î—ó –≤–∏—Å–æ—Ç–∏ –∑ —Ü—ñ–ª–ª—é
        float targetY = targetPos.y;
        float currentY = currentPos.y;
        
        Vector2 direction = Vector2.zero;
        
        // –Ø–∫—â–æ —Ä—ñ–∑–Ω–∏—Ü—è –ø–æ Y –±—ñ–ª—å—à–∞ –∑–∞ –ø–µ–≤–Ω–∏–π –ø–æ—Ä—ñ–≥, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏—Ä—ñ–≤–Ω—é—î–º–æ –≤–∏—Å–æ—Ç—É
        float yDifference = Mathf.Abs(targetY - currentY);
        if (yDifference > 0.1f)
        {
            // –†—É—Ö –ø–æ Y-–æ—Å—ñ –¥–ª—è –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è
            direction.y = targetY > currentY ? 1f : -1f;
            
            // –¢–∞–∫–æ–∂ —Ä—É—Ö–∞—î–º–æ—Å—è –ø–æ X, –∞–ª–µ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ
            if (targetPos.x < currentPos.x)
            {
                direction.x = -0.5f;
            }
        }
        else
        {
            // –ö–æ–ª–∏ –≤–∏—Å–æ—Ç–∞ –≤–∏—Ä—ñ–≤–Ω—è–Ω–∞, —Ä—É—Ö–∞—î–º–æ—Å—è –≤ –±—ñ–∫ —Ü—ñ–ª—ñ
            direction = (targetPos - currentPos).normalized;
        }
        
        transform.Translate(direction * stats.moveSpeed * Time.deltaTime);
    }

    void Attack()
    {
        if (target == null) return;

        if (target.CompareTag("Unit") && target.TryGetComponent<Unit>(out Unit unit))
        {
            unit.TakeDamage(stats.damage);

            if (unit == null || unit.IsDead())
            {
                target = null;
            }
        }
        else if (target.CompareTag("Home"))
        {
            if (target.TryGetComponent<HomeBase>(out HomeBase home))
            {
                home.TakeDamage(stats.damage);
            }
        }
    }

    public void TakeDamage(int dmg)
    {
        if (isDead) return;

        currentHealth -= dmg;
        if (currentHealth <= 0)
        {
            Die();
        }
    }

    void Die()
    {
        isDead = true;
        animator.SetBool("isRunning", false);
        animator.SetBool("isAttacking", false);
        animator.SetBool("isDead", true);

        // üö´ –í–∏–º–∏–∫–∞—î–º–æ –∫–æ–ª–∞–π–¥–µ—Ä, —â–æ–± –≤–æ—Ä–æ–≥ –Ω–µ –∑–∞–≤–∞–∂–∞–≤
        if (enemyCollider != null)
            enemyCollider.enabled = false;

        // üí∞ –°–ø–∞–≤–Ω–∏–º–æ –∑–æ–ª–æ—Ç–æ –∑–∞–º—ñ—Å—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ GoldManager
        SpawnGold();
        
        // üé≠ –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ—Ä—É—Ç–∏–Ω—É –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è
        StartCoroutine(FadeOutAndDestroy());
    }

    // üí∞ –ú–µ—Ç–æ–¥ –¥–ª—è —Å–ø–∞–≤–Ω—É –∑–æ–ª–æ—Ç–∞
    void SpawnGold()
    {
        if (goldPrefab != null)
        {
            GameObject spawnedGold = Instantiate(goldPrefab, transform.position, Quaternion.identity);
            
            // –ü–µ—Ä–µ–¥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–ª–æ—Ç–∞ –≤ –ø—Ä–µ—Ñ–∞–±
            GoldPickup goldPickup = spawnedGold.GetComponent<GoldPickup>();
            if (goldPickup != null)
            {
                goldPickup.SetGoldAmount(gold);
            }
        }
    }

    // üåü –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è
    IEnumerator FadeOutAndDestroy()
    {
        float fadeSpeed = 2f; // –®–≤–∏–¥–∫—ñ—Å—Ç—å –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è
        float waitTime = 1f; // –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è
        
        // –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏, —â–æ–± –∞–Ω—ñ–º–∞—Ü—ñ—è —Å–º–µ—Ä—Ç—ñ –≤—ñ–¥—Ç–≤–æ—Ä–∏–ª–∞—Å—å
        yield return new WaitForSeconds(waitTime);
        
        // –ü–æ—Å—Ç—É–ø–æ–≤–æ –∑–º–µ–Ω—à—É—î–º–æ –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å
        while (spriteRenderer.color.a > 0f)
        {
            Color currentColor = spriteRenderer.color;
            currentColor.a -= fadeSpeed * Time.deltaTime;
            spriteRenderer.color = currentColor;
            
            yield return null; // –ß–µ–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–∞–¥—Ä
        }
        
        // –ó–Ω–∏—â—É—î–º–æ –æ–±'—î–∫—Ç –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è
        Destroy(gameObject);
    }

    void OnTriggerEnter2D(Collider2D other)
    {
        if (isDead) return;

        if (other.CompareTag("Unit"))
        {
            if (!inZoneUnits.Contains(other.gameObject))
                inZoneUnits.Add(other.gameObject);

            if (target == null)
            {
                target = other.gameObject;
            }
        }
        else if (other.CompareTag("Home") && target == null && inZoneUnits.Count == 0)
        {
            target = other.gameObject;
        }
    }

    void OnTriggerExit2D(Collider2D other)
    {
        if (isDead) return;

        if (other.CompareTag("Unit"))
        {
            inZoneUnits.Remove(other.gameObject);
            if (target == other.gameObject)
            {
                target = null;
            }
        }
        else if (other.CompareTag("Home") && target == other.gameObject)
        {
            target = null;
        }
    }

    void RemoveNullsFromZone()
    {
        inZoneUnits.RemoveAll(unit => unit == null);
    }

    public bool IsDead()
    {
        return currentHealth <= 0;
    }
}