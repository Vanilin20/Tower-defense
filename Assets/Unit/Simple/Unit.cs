using System.Collections.Generic;
using UnityEngine;

public class Unit : MonoBehaviour
{
    public UnitStats stats;

    private Vector3 targetPosition;
    private GameObject enemyTarget;
    private float attackTimer;

    private int currentHealth;
    private ZoneController myZone; // üéØ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–Ω—É
    private List<GameObject> inZoneEnemies = new List<GameObject>();

    // üÜï –î–û–î–ê–ù–û: –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç—É-–≤–ª–∞—Å–Ω–∏–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∫—É–ª–¥–∞—É–Ω—É
    private CardDragSpawner ownerCard;

    void Start()
    {
        currentHealth = stats.maxHealth;
    }

    void Update()
    {
        // üîÅ –Ø–∫—â–æ –≤—Ç—Ä–∞—á–µ–Ω–æ —Ü—ñ–ª—å ‚Äî –≤–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à–æ–≥–æ –≤–æ—Ä–æ–≥–∞, —è–∫—â–æ —î
        if (enemyTarget == null)
        {
            RemoveNullsFromZone();
            if (inZoneEnemies.Count > 0)
            {
                enemyTarget = inZoneEnemies[0];
            }
        }

        if (enemyTarget != null)
        {
            float dist = Vector2.Distance(transform.position, enemyTarget.transform.position);
            if (dist > stats.attackRange)
            {
                // üéØ –†—É—Ö –¥–æ –≤–æ—Ä–æ–≥–∞ –∑ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è–º –ø–æ –≤–∏—Å–æ—Ç—ñ
                MoveTowardsEnemy();
            }
            else
            {
                attackTimer -= Time.deltaTime;
                if (attackTimer <= 0f)
                {
                    Attack();
                    attackTimer = stats.attackCooldown;
                }
            }
        }
        else
        {
            if (Vector2.Distance(transform.position, targetPosition) > 0.1f)
            {
                MoveTowards(targetPosition);
            }
        }
    }

    void MoveTowardsEnemy()
    {
        if (enemyTarget == null) return;

        Vector3 enemyPos = enemyTarget.transform.position;
        Vector3 currentPos = transform.position;
        
        // üìê –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –ø–æ Y-–æ—Å—ñ - —Ä—É—Ö–∞—î–º–æ—Å—è –¥–æ –æ–¥–Ω—ñ—î—ó –≤–∏—Å–æ—Ç–∏ –∑ –≤–æ—Ä–æ–≥–æ–º
        float enemyY = enemyPos.y;
        float currentY = currentPos.y;
        
        Vector2 direction = Vector2.zero;
        
        // –Ø–∫—â–æ —Ä—ñ–∑–Ω–∏—Ü—è –ø–æ Y –±—ñ–ª—å—à–∞ –∑–∞ –ø–µ–≤–Ω–∏–π –ø–æ—Ä—ñ–≥, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏—Ä—ñ–≤–Ω—é—î–º–æ –≤–∏—Å–æ—Ç—É
        float yDifference = Mathf.Abs(enemyY - currentY);
        if (yDifference > 0.1f)
        {
            // –†—É—Ö –ø–æ Y-–æ—Å—ñ –¥–ª—è –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è
            direction.y = enemyY > currentY ? 1f : -1f;
            
            // –¢–∞–∫–æ–∂ —Ä—É—Ö–∞—î–º–æ—Å—è –ø–æ X, –∞–ª–µ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ
            if (enemyPos.x > currentPos.x)
            {
                direction.x = 0.5f;
            }
        }
        else
        {
            // –ö–æ–ª–∏ –≤–∏—Å–æ—Ç–∞ –≤–∏—Ä—ñ–≤–Ω—è–Ω–∞, —Ä—É—Ö–∞—î–º–æ—Å—è –≤ –±—ñ–∫ –≤–æ—Ä–æ–≥–∞
            direction = (enemyPos - currentPos).normalized;
        }
        
        transform.Translate(direction * stats.moveSpeed * Time.deltaTime);
    }

    void MoveTowards(Vector3 position)
    {
        Vector2 dir = (position - transform.position).normalized;
        transform.Translate(dir * stats.moveSpeed * Time.deltaTime);
    }

    public void SetTargetPosition(Vector3 pos)
    {
        targetPosition = pos;
    }

    // üì• –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑–∑–æ–≤–Ω—ñ, —â–æ–± –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ —é–Ω—ñ—Ç–∞ –¥–æ –∑–æ–Ω–∏
    public void AssignZone(ZoneController zone)
    {
        myZone = zone;
    }

    // üÜï –î–û–î–ê–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏-–≤–ª–∞—Å–Ω–∏–∫–∞
    public void SetOwnerCard(CardDragSpawner card)
    {
        ownerCard = card;
        Debug.Log($"Unit {gameObject.name} assigned to card {card.gameObject.name}");
    }

    // üÜï –î–û–î–ê–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–æ–∑—Ä–∏–≤—É –∑–≤'—è–∑–∫—É –∑ –∫–∞—Ä—Ç–æ—é (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
    public void RemoveOwnerCard()
    {
        ownerCard = null;
    }

    public void TakeDamage(int dmg)
    {
        currentHealth -= dmg;
        if (currentHealth <= 0)
        {
            Die(); // üîÑ –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ —Å–º–µ—Ä—Ç—ñ
        }
    }

    // üÜï –î–û–î–ê–ù–û: –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥ —Å–º–µ—Ä—Ç—ñ
    public void Die()
    {
        // üîì –ó–≤—ñ–ª—å–Ω—è—î–º–æ –∑–æ–Ω—É, —è–∫—â–æ —é–Ω—ñ—Ç –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π
        if (myZone != null)
        {
            myZone.hasUnit = false;
        }

        // üÜï –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–∞—Ä—Ç—É —â–æ —é–Ω—ñ—Ç –ø–æ–º–µ—Ä (–∑–Ω—ñ–º–∞—î–º–æ –∫—É–ª–¥–∞—É–Ω)
        if (ownerCard != null)
        {
            ownerCard.OnUnitDestroyed();
        }

        // –ó–Ω–∏—â—É—î–º–æ —é–Ω—ñ—Ç
        Destroy(gameObject);
    }

    // üÜï –î–û–î–ê–ù–û: –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–ª–∏ —é–Ω—ñ—Ç –∑–Ω–∏—â—É—î—Ç—å—Å—è (–¥–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞)
    void OnDestroy()
    {
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–∞—Ä—Ç—É —â–æ —é–Ω—ñ—Ç –ø–æ–º–µ—Ä (—è–∫—â–æ —â–µ –Ω–µ –ø–æ–≤—ñ–¥–æ–º–∏–ª–∏)
        if (ownerCard != null)
        {
            ownerCard.OnUnitDestroyed();
        }
    }

    void Attack()
    {
        if (enemyTarget != null && enemyTarget.TryGetComponent<Enemy>(out Enemy enemy))
        {
            enemy.TakeDamage(stats.damage);

            if (enemy == null || enemy.IsDead())
            {
                enemyTarget = null;
            }
        }
    }

    void OnTriggerEnter2D(Collider2D other)
    {
        if (other.CompareTag("Enemy"))
        {
            if (!inZoneEnemies.Contains(other.gameObject))
                inZoneEnemies.Add(other.gameObject);

            if (enemyTarget == null)
            {
                enemyTarget = other.gameObject;
            }
        }
    }

    void OnTriggerExit2D(Collider2D other)
    {
        if (other.CompareTag("Enemy"))
        {
            inZoneEnemies.Remove(other.gameObject);

            if (enemyTarget == other.gameObject)
            {
                enemyTarget = null;
            }
        }
    }

    void RemoveNullsFromZone()
    {
        inZoneEnemies.RemoveAll(enemy => enemy == null);
    }

    public bool IsDead()
    {
        return currentHealth <= 0;
    }
}